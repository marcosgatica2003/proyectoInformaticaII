<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_MFRC522_8cpp_source" xml:lang="es">
<title>MFRC522.cpp</title>
<indexterm><primary>main/libraries/RFID-RC522/MFRC522.cpp</primary></indexterm>
<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*</emphasis>
2 <emphasis role="comment">*&#32;MFRC522.cpp&#32;-&#32;Library&#32;to&#32;use&#32;ARDUINO&#32;RFID&#32;MODULE&#32;KIT&#32;13.56&#32;MHZ&#32;WITH&#32;TAGS&#32;SPI&#32;W&#32;AND&#32;R&#32;BY&#32;COOQROBOT.</emphasis>
3 <emphasis role="comment">*&#32;NOTE:&#32;Please&#32;also&#32;check&#32;the&#32;comments&#32;in&#32;MFRC522.h&#32;-&#32;they&#32;provide&#32;useful&#32;hints&#32;and&#32;background&#32;information.</emphasis>
4 <emphasis role="comment">*&#32;Released&#32;into&#32;the&#32;public&#32;domain.</emphasis>
5 <emphasis role="comment">*/</emphasis>
6 
7 <emphasis role="preprocessor">#include&#32;&lt;Arduino.h&gt;</emphasis>
8 <emphasis role="preprocessor">#include&#32;&quot;MFRC522.h&quot;</emphasis>
9 
11 <emphasis role="comment">//&#32;Functions&#32;for&#32;setting&#32;up&#32;the&#32;Arduino</emphasis>
13 
16 <link linkend="_classMFRC522_1a999d0301e800f479e1ecfa2fd06e28c8">MFRC522::MFRC522</link>():&#32;<link linkend="_classMFRC522">MFRC522</link>(SS,&#32;UINT8_MAX)&#32;{&#32;<emphasis role="comment">//&#32;SS&#32;is&#32;defined&#32;in&#32;pins_arduino.h,&#32;UINT8_MAX&#32;means&#32;there&#32;is&#32;no&#32;connection&#32;from&#32;Arduino&#32;to&#32;MFRC522&apos;s&#32;reset&#32;and&#32;power&#32;down&#32;input</emphasis>
17 }&#32;<emphasis role="comment">//&#32;End&#32;constructor</emphasis>
18 
23 <link linkend="_classMFRC522_1a999d0301e800f479e1ecfa2fd06e28c8">MFRC522::MFRC522</link>(&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;resetPowerDownPin&#32;&#32;
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;):&#32;<link linkend="_classMFRC522">MFRC522</link>(SS,&#32;resetPowerDownPin)&#32;{&#32;<emphasis role="comment">//&#32;SS&#32;is&#32;defined&#32;in&#32;pins_arduino.h</emphasis>
25 }&#32;<emphasis role="comment">//&#32;End&#32;constructor</emphasis>
26 
31 <link linkend="_classMFRC522_1a999d0301e800f479e1ecfa2fd06e28c8">MFRC522::MFRC522</link>(&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;chipSelectPin,&#32;&#32;&#32;&#32;&#32;
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;resetPowerDownPin&#32;&#32;
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
34 &#32;&#32;&#32;&#32;_chipSelectPin&#32;=&#32;chipSelectPin;
35 &#32;&#32;&#32;&#32;_resetPowerDownPin&#32;=&#32;resetPowerDownPin;
36 }&#32;<emphasis role="comment">//&#32;End&#32;constructor</emphasis>
37 
39 <emphasis role="comment">//&#32;Basic&#32;interface&#32;functions&#32;for&#32;communicating&#32;with&#32;the&#32;MFRC522</emphasis>
41 
46 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">MFRC522::PCD_WriteRegister</link>(&#32;&#32;&#32;&#32;PCD_Register&#32;reg,&#32;&#32;&#32;
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;value&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
49 &#32;&#32;&#32;&#32;SPI.beginTransaction(SPISettings(MFRC522_SPICLOCK,&#32;MSBFIRST,&#32;SPI_MODE0));&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;settings&#32;to&#32;work&#32;with&#32;SPI&#32;bus</emphasis>
50 &#32;&#32;&#32;&#32;digitalWrite(_chipSelectPin,&#32;LOW);&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Select&#32;slave</emphasis>
51 &#32;&#32;&#32;&#32;SPI.transfer(reg);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;MSB&#32;==&#32;0&#32;is&#32;for&#32;writing.&#32;LSB&#32;is&#32;not&#32;used&#32;in&#32;address.&#32;Datasheet&#32;section&#32;8.1.2.3.</emphasis>
52 &#32;&#32;&#32;&#32;SPI.transfer(value);
53 &#32;&#32;&#32;&#32;digitalWrite(_chipSelectPin,&#32;HIGH);&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Release&#32;slave&#32;again</emphasis>
54 &#32;&#32;&#32;&#32;SPI.endTransaction();&#32;<emphasis role="comment">//&#32;Stop&#32;using&#32;the&#32;SPI&#32;bus</emphasis>
55 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_WriteRegister()</emphasis>
56 
61 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">MFRC522::PCD_WriteRegister</link>(&#32;&#32;&#32;&#32;PCD_Register&#32;reg,&#32;&#32;&#32;
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;count,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*values&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
65 &#32;&#32;&#32;&#32;SPI.beginTransaction(SPISettings(MFRC522_SPICLOCK,&#32;MSBFIRST,&#32;SPI_MODE0));&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;settings&#32;to&#32;work&#32;with&#32;SPI&#32;bus</emphasis>
66 &#32;&#32;&#32;&#32;digitalWrite(_chipSelectPin,&#32;LOW);&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Select&#32;slave</emphasis>
67 &#32;&#32;&#32;&#32;SPI.transfer(reg);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;MSB&#32;==&#32;0&#32;is&#32;for&#32;writing.&#32;LSB&#32;is&#32;not&#32;used&#32;in&#32;address.&#32;Datasheet&#32;section&#32;8.1.2.3.</emphasis>
68 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">byte</emphasis>&#32;index&#32;=&#32;0;&#32;index&#32;&lt;&#32;count;&#32;index++)&#32;{
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SPI.transfer(values[index]);
70 &#32;&#32;&#32;&#32;}
71 &#32;&#32;&#32;&#32;digitalWrite(_chipSelectPin,&#32;HIGH);&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Release&#32;slave&#32;again</emphasis>
72 &#32;&#32;&#32;&#32;SPI.endTransaction();&#32;<emphasis role="comment">//&#32;Stop&#32;using&#32;the&#32;SPI&#32;bus</emphasis>
73 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_WriteRegister()</emphasis>
74 
79 <emphasis role="keywordtype">byte</emphasis>&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">MFRC522::PCD_ReadRegister</link>(&#32;PCD_Register&#32;reg&#32;&#32;&#32;&#32;
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
81 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;value;
82 &#32;&#32;&#32;&#32;SPI.beginTransaction(SPISettings(MFRC522_SPICLOCK,&#32;MSBFIRST,&#32;SPI_MODE0));&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;settings&#32;to&#32;work&#32;with&#32;SPI&#32;bus</emphasis>
83 &#32;&#32;&#32;&#32;digitalWrite(_chipSelectPin,&#32;LOW);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Select&#32;slave</emphasis>
84 &#32;&#32;&#32;&#32;SPI.transfer(0x80&#32;|&#32;reg);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;MSB&#32;==&#32;1&#32;is&#32;for&#32;reading.&#32;LSB&#32;is&#32;not&#32;used&#32;in&#32;address.&#32;Datasheet&#32;section&#32;8.1.2.3.</emphasis>
85 &#32;&#32;&#32;&#32;value&#32;=&#32;SPI.transfer(0);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;the&#32;value&#32;back.&#32;Send&#32;0&#32;to&#32;stop&#32;reading.</emphasis>
86 &#32;&#32;&#32;&#32;digitalWrite(_chipSelectPin,&#32;HIGH);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Release&#32;slave&#32;again</emphasis>
87 &#32;&#32;&#32;&#32;SPI.endTransaction();&#32;<emphasis role="comment">//&#32;Stop&#32;using&#32;the&#32;SPI&#32;bus</emphasis>
88 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value;
89 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_ReadRegister()</emphasis>
90 
95 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">MFRC522::PCD_ReadRegister</link>(&#32;PCD_Register&#32;reg,&#32;&#32;&#32;
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;count,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*values,&#32;&#32;&#32;&#32;&#32;&#32;&#32;
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;rxAlign&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(count&#32;==&#32;0)&#32;{
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
102 &#32;&#32;&#32;&#32;}
103 &#32;&#32;&#32;&#32;<emphasis role="comment">//Serial.print(F(&quot;Reading&#32;&quot;));&#32;&#32;Serial.print(count);&#32;Serial.println(F(&quot;&#32;bytes&#32;from&#32;register.&quot;));</emphasis>
104 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;address&#32;=&#32;0x80&#32;|&#32;reg;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;MSB&#32;==&#32;1&#32;is&#32;for&#32;reading.&#32;LSB&#32;is&#32;not&#32;used&#32;in&#32;address.&#32;Datasheet&#32;section&#32;8.1.2.3.</emphasis>
105 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;index&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Index&#32;in&#32;values&#32;array.</emphasis>
106 &#32;&#32;&#32;&#32;SPI.beginTransaction(SPISettings(MFRC522_SPICLOCK,&#32;MSBFIRST,&#32;SPI_MODE0));&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;settings&#32;to&#32;work&#32;with&#32;SPI&#32;bus</emphasis>
107 &#32;&#32;&#32;&#32;digitalWrite(_chipSelectPin,&#32;LOW);&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Select&#32;slave</emphasis>
108 &#32;&#32;&#32;&#32;count--;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;One&#32;read&#32;is&#32;performed&#32;outside&#32;of&#32;the&#32;loop</emphasis>
109 &#32;&#32;&#32;&#32;SPI.transfer(address);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Tell&#32;MFRC522&#32;which&#32;address&#32;we&#32;want&#32;to&#32;read</emphasis>
110 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rxAlign)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;update&#32;bit&#32;positions&#32;rxAlign..7&#32;in&#32;values[0]</emphasis>
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;bit&#32;mask&#32;for&#32;bit&#32;positions&#32;rxAlign..7</emphasis>
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;mask&#32;=&#32;(0xFF&#32;&lt;&lt;&#32;rxAlign)&#32;&amp;&#32;0xFF;
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;value&#32;and&#32;tell&#32;that&#32;we&#32;want&#32;to&#32;read&#32;the&#32;same&#32;address&#32;again.</emphasis>
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;value&#32;=&#32;SPI.transfer(address);
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Apply&#32;mask&#32;to&#32;both&#32;current&#32;value&#32;of&#32;values[0]&#32;and&#32;the&#32;new&#32;data&#32;in&#32;value.</emphasis>
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values[0]&#32;=&#32;(values[0]&#32;&amp;&#32;~mask)&#32;|&#32;(value&#32;&amp;&#32;mask);
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index++;
118 &#32;&#32;&#32;&#32;}
119 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(index&#32;&lt;&#32;count)&#32;{
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values[index]&#32;=&#32;SPI.transfer(address);&#32;&#32;<emphasis role="comment">//&#32;Read&#32;value&#32;and&#32;tell&#32;that&#32;we&#32;want&#32;to&#32;read&#32;the&#32;same&#32;address&#32;again.</emphasis>
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index++;
122 &#32;&#32;&#32;&#32;}
123 &#32;&#32;&#32;&#32;values[index]&#32;=&#32;SPI.transfer(0);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;the&#32;final&#32;byte.&#32;Send&#32;0&#32;to&#32;stop&#32;reading.</emphasis>
124 &#32;&#32;&#32;&#32;digitalWrite(_chipSelectPin,&#32;HIGH);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Release&#32;slave&#32;again</emphasis>
125 &#32;&#32;&#32;&#32;SPI.endTransaction();&#32;<emphasis role="comment">//&#32;Stop&#32;using&#32;the&#32;SPI&#32;bus</emphasis>
126 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_ReadRegister()</emphasis>
127 
131 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1acebb9a90249419f2a53281c4a13727d1">MFRC522::PCD_SetRegisterBitMask</link>(&#32;&#32;&#32;PCD_Register&#32;reg,&#32;&#32;&#32;
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;mask&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{&#32;
134 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;tmp;
135 &#32;&#32;&#32;&#32;tmp&#32;=&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(reg);
136 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(reg,&#32;tmp&#32;|&#32;mask);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;set&#32;bit&#32;mask</emphasis>
137 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_SetRegisterBitMask()</emphasis>
138 
142 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1a76193f4f8916f688fe2b7976d0fd1dc2">MFRC522::PCD_ClearRegisterBitMask</link>(&#32;PCD_Register&#32;reg,&#32;&#32;&#32;
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;mask&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
145 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;tmp;
146 &#32;&#32;&#32;&#32;tmp&#32;=&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(reg);
147 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(reg,&#32;tmp&#32;&amp;&#32;(~mask));&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clear&#32;bit&#32;mask</emphasis>
148 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_ClearRegisterBitMask()</emphasis>
149 
150 
156 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1a7c65647b1d72b6ee7557797322030643">MFRC522::PCD_CalculateCRC</link>(&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*data,&#32;&#32;&#32;&#32;&#32;
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;length,&#32;&#32;&#32;&#32;
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*result&#32;&#32;&#32;&#32;
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
160 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(CommandReg,&#32;PCD_Idle);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Stop&#32;any&#32;active&#32;command.</emphasis>
161 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(DivIrqReg,&#32;0x04);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Clear&#32;the&#32;CRCIRq&#32;interrupt&#32;request&#32;bit</emphasis>
162 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(FIFOLevelReg,&#32;0x80);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FlushBuffer&#32;=&#32;1,&#32;FIFO&#32;initialization</emphasis>
163 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(FIFODataReg,&#32;length,&#32;data);&#32;&#32;&#32;<emphasis role="comment">//&#32;Write&#32;data&#32;to&#32;the&#32;FIFO</emphasis>
164 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(CommandReg,&#32;PCD_CalcCRC);&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Start&#32;the&#32;calculation</emphasis>
165 &#32;&#32;&#32;&#32;
166 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Wait&#32;for&#32;the&#32;CRC&#32;calculation&#32;to&#32;complete.&#32;Check&#32;for&#32;the&#32;register&#32;to</emphasis>
167 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;indicate&#32;that&#32;the&#32;CRC&#32;calculation&#32;is&#32;complete&#32;in&#32;a&#32;loop.&#32;If&#32;the</emphasis>
168 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;calculation&#32;is&#32;not&#32;indicated&#32;as&#32;complete&#32;in&#32;~90ms,&#32;then&#32;time&#32;out</emphasis>
169 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;operation.</emphasis>
170 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint32_t&#32;deadline&#32;=&#32;millis()&#32;+&#32;89;
171 
172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DivIrqReg[7..0]&#32;bits&#32;are:&#32;Set2&#32;reserved&#32;reserved&#32;MfinActIRq&#32;reserved&#32;CRCIRq&#32;reserved&#32;reserved</emphasis>
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;n&#32;=&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(DivIrqReg);
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&amp;&#32;0x04)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;CRCIRq&#32;bit&#32;set&#32;-&#32;calculation&#32;done</emphasis>
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(CommandReg,&#32;PCD_Idle);&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Stop&#32;calculating&#32;CRC&#32;for&#32;new&#32;content&#32;in&#32;the&#32;FIFO.</emphasis>
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Transfer&#32;the&#32;result&#32;from&#32;the&#32;registers&#32;to&#32;the&#32;result&#32;buffer</emphasis>
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;=&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(CRCResultRegL);
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1]&#32;=&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(CRCResultRegH);
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_OK;
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yield();
183 &#32;&#32;&#32;&#32;}
184 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis>uint32_t<emphasis role="keyword">&gt;</emphasis>&#32;(millis())&#32;&lt;&#32;deadline);
185 
186 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;89ms&#32;passed&#32;and&#32;nothing&#32;happened.&#32;Communication&#32;with&#32;the&#32;MFRC522&#32;might&#32;be&#32;down.</emphasis>
187 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_TIMEOUT;
188 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_CalculateCRC()</emphasis>
189 
190 
192 <emphasis role="comment">//&#32;Functions&#32;for&#32;manipulating&#32;the&#32;MFRC522</emphasis>
194 
198 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1ad681e424fc68a57941bea5702cee05eb">MFRC522::PCD_Init</link>()&#32;{
199 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hardReset&#32;=&#32;<emphasis role="keyword">false</emphasis>;
200 
201 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;chipSelectPin&#32;as&#32;digital&#32;output,&#32;do&#32;not&#32;select&#32;the&#32;slave&#32;yet</emphasis>
202 &#32;&#32;&#32;&#32;pinMode(_chipSelectPin,&#32;OUTPUT);
203 &#32;&#32;&#32;&#32;digitalWrite(_chipSelectPin,&#32;HIGH);
204 &#32;&#32;&#32;&#32;
205 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;a&#32;valid&#32;pin&#32;number&#32;has&#32;been&#32;set,&#32;pull&#32;device&#32;out&#32;of&#32;power&#32;down&#32;/&#32;reset&#32;state.</emphasis>
206 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_resetPowerDownPin&#32;!=&#32;UNUSED_PIN)&#32;{
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;set&#32;the&#32;resetPowerDownPin&#32;as&#32;digital&#32;input,&#32;to&#32;check&#32;the&#32;MFRC522&#32;power&#32;down&#32;mode.</emphasis>
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pinMode(_resetPowerDownPin,&#32;INPUT);
209 &#32;&#32;&#32;&#32;
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(digitalRead(_resetPowerDownPin)&#32;==&#32;LOW)&#32;{&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;MFRC522&#32;chip&#32;is&#32;in&#32;power&#32;down&#32;mode.</emphasis>
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pinMode(_resetPowerDownPin,&#32;OUTPUT);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;set&#32;the&#32;resetPowerDownPin&#32;as&#32;digital&#32;output.</emphasis>
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digitalWrite(_resetPowerDownPin,&#32;LOW);&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Make&#32;sure&#32;we&#32;have&#32;a&#32;clean&#32;LOW&#32;state.</emphasis>
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;delayMicroseconds(2);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;8.8.1&#32;Reset&#32;timing&#32;requirements&#32;says&#32;about&#32;100ns.&#32;Let&#32;us&#32;be&#32;generous:&#32;2μsl</emphasis>
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digitalWrite(_resetPowerDownPin,&#32;HIGH);&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Exit&#32;power&#32;down&#32;mode.&#32;This&#32;triggers&#32;a&#32;hard&#32;reset.</emphasis>
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Section&#32;8.8.2&#32;in&#32;the&#32;datasheet&#32;says&#32;the&#32;oscillator&#32;start-up&#32;time&#32;is&#32;the&#32;start&#32;up&#32;time&#32;of&#32;the&#32;crystal&#32;+&#32;37,74μs.&#32;Let&#32;us&#32;be&#32;generous:&#32;50ms.</emphasis>
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;delay(50);
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hardReset&#32;=&#32;<emphasis role="keyword">true</emphasis>;
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
219 &#32;&#32;&#32;&#32;}
220 
221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!hardReset)&#32;{&#32;<emphasis role="comment">//&#32;Perform&#32;a&#32;soft&#32;reset&#32;if&#32;we&#32;haven&apos;t&#32;triggered&#32;a&#32;hard&#32;reset&#32;above.</emphasis>
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1a9886678ea0a65021bf602cfb110caa15">PCD_Reset</link>();
223 &#32;&#32;&#32;&#32;}
224 &#32;&#32;&#32;&#32;
225 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reset&#32;baud&#32;rates</emphasis>
226 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(TxModeReg,&#32;0x00);
227 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(RxModeReg,&#32;0x00);
228 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reset&#32;ModWidthReg</emphasis>
229 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(ModWidthReg,&#32;0x26);
230 
231 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;communicating&#32;with&#32;a&#32;PICC&#32;we&#32;need&#32;a&#32;timeout&#32;if&#32;something&#32;goes&#32;wrong.</emphasis>
232 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;f_timer&#32;=&#32;13.56&#32;MHz&#32;/&#32;(2*TPreScaler+1)&#32;where&#32;TPreScaler&#32;=&#32;[TPrescaler_Hi:TPrescaler_Lo].</emphasis>
233 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TPrescaler_Hi&#32;are&#32;the&#32;four&#32;low&#32;bits&#32;in&#32;TModeReg.&#32;TPrescaler_Lo&#32;is&#32;TPrescalerReg.</emphasis>
234 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(TModeReg,&#32;0x80);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TAuto=1;&#32;timer&#32;starts&#32;automatically&#32;at&#32;the&#32;end&#32;of&#32;the&#32;transmission&#32;in&#32;all&#32;communication&#32;modes&#32;at&#32;all&#32;speeds</emphasis>
235 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(TPrescalerReg,&#32;0xA9);&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TPreScaler&#32;=&#32;TModeReg[3..0]:TPrescalerReg,&#32;ie&#32;0x0A9&#32;=&#32;169&#32;=&gt;&#32;f_timer=40kHz,&#32;ie&#32;a&#32;timer&#32;period&#32;of&#32;25μs.</emphasis>
236 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(TReloadRegH,&#32;0x03);&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reload&#32;timer&#32;with&#32;0x3E8&#32;=&#32;1000,&#32;ie&#32;25ms&#32;before&#32;timeout.</emphasis>
237 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(TReloadRegL,&#32;0xE8);
238 &#32;&#32;&#32;&#32;
239 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(TxASKReg,&#32;0x40);&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Default&#32;0x00.&#32;Force&#32;a&#32;100&#32;%&#32;ASK&#32;modulation&#32;independent&#32;of&#32;the&#32;ModGsPReg&#32;register&#32;setting</emphasis>
240 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(ModeReg,&#32;0x3D);&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Default&#32;0x3F.&#32;Set&#32;the&#32;preset&#32;value&#32;for&#32;the&#32;CRC&#32;coprocessor&#32;for&#32;the&#32;CalcCRC&#32;command&#32;to&#32;0x6363&#32;(ISO&#32;14443-3&#32;part&#32;6.2.4)</emphasis>
241 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1a044be037a5f172e9cea7d8ce1dcf32e0">PCD_AntennaOn</link>();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Enable&#32;the&#32;antenna&#32;driver&#32;pins&#32;TX1&#32;and&#32;TX2&#32;(they&#32;were&#32;disabled&#32;by&#32;the&#32;reset)</emphasis>
242 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_Init()</emphasis>
243 
247 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1ad681e424fc68a57941bea5702cee05eb">MFRC522::PCD_Init</link>(&#32;<emphasis role="keywordtype">byte</emphasis>&#32;resetPowerDownPin&#32;&#32;
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
249 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1ad681e424fc68a57941bea5702cee05eb">PCD_Init</link>(SS,&#32;resetPowerDownPin);&#32;<emphasis role="comment">//&#32;SS&#32;is&#32;defined&#32;in&#32;pins_arduino.h</emphasis>
250 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_Init()</emphasis>
251 
255 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1ad681e424fc68a57941bea5702cee05eb">MFRC522::PCD_Init</link>(&#32;<emphasis role="keywordtype">byte</emphasis>&#32;chipSelectPin,&#32;&#32;&#32;&#32;&#32;
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;resetPowerDownPin&#32;&#32;
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
258 &#32;&#32;&#32;&#32;_chipSelectPin&#32;=&#32;chipSelectPin;
259 &#32;&#32;&#32;&#32;_resetPowerDownPin&#32;=&#32;resetPowerDownPin;&#32;
260 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;chipSelectPin&#32;as&#32;digital&#32;output,&#32;do&#32;not&#32;select&#32;the&#32;slave&#32;yet</emphasis>
261 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1ad681e424fc68a57941bea5702cee05eb">PCD_Init</link>();
262 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_Init()</emphasis>
263 
267 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1a9886678ea0a65021bf602cfb110caa15">MFRC522::PCD_Reset</link>()&#32;{
268 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(CommandReg,&#32;PCD_SoftReset);&#32;&#32;&#32;<emphasis role="comment">//&#32;Issue&#32;the&#32;SoftReset&#32;command.</emphasis>
269 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;datasheet&#32;does&#32;not&#32;mention&#32;how&#32;long&#32;the&#32;SoftRest&#32;command&#32;takes&#32;to&#32;complete.</emphasis>
270 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;But&#32;the&#32;MFRC522&#32;might&#32;have&#32;been&#32;in&#32;soft&#32;power-down&#32;mode&#32;(triggered&#32;by&#32;bit&#32;4&#32;of&#32;CommandReg)&#32;</emphasis>
271 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Section&#32;8.8.2&#32;in&#32;the&#32;datasheet&#32;says&#32;the&#32;oscillator&#32;start-up&#32;time&#32;is&#32;the&#32;start&#32;up&#32;time&#32;of&#32;the&#32;crystal&#32;+&#32;37,74μs.&#32;Let&#32;us&#32;be&#32;generous:&#32;50ms.</emphasis>
272 &#32;&#32;&#32;&#32;uint8_t&#32;count&#32;=&#32;0;
273 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Wait&#32;for&#32;the&#32;PowerDown&#32;bit&#32;in&#32;CommandReg&#32;to&#32;be&#32;cleared&#32;(max&#32;3x50ms)</emphasis>
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;delay(50);
276 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;((<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(CommandReg)&#32;&amp;&#32;(1&#32;&lt;&lt;&#32;4))&#32;&amp;&amp;&#32;(++count)&#32;&lt;&#32;3);
277 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_Reset()</emphasis>
278 
283 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1a044be037a5f172e9cea7d8ce1dcf32e0">MFRC522::PCD_AntennaOn</link>()&#32;{
284 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;value&#32;=&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(TxControlReg);
285 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((value&#32;&amp;&#32;0x03)&#32;!=&#32;0x03)&#32;{
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(TxControlReg,&#32;value&#32;|&#32;0x03);
287 &#32;&#32;&#32;&#32;}
288 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_AntennaOn()</emphasis>
289 
293 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1a2098ebe85700109b20c5026643f1dad7">MFRC522::PCD_AntennaOff</link>()&#32;{
294 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1a76193f4f8916f688fe2b7976d0fd1dc2">PCD_ClearRegisterBitMask</link>(TxControlReg,&#32;0x03);
295 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_AntennaOff()</emphasis>
296 
304 <emphasis role="keywordtype">byte</emphasis>&#32;<link linkend="_classMFRC522_1aa02ae994a9ebf146475f46fc538cef28">MFRC522::PCD_GetAntennaGain</link>()&#32;{
305 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(RFCfgReg)&#32;&amp;&#32;(0x07&lt;&lt;4);
306 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_GetAntennaGain()</emphasis>
307 
313 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1a5ce84dd855f2ae297dd00fafaf62ef78">MFRC522::PCD_SetAntennaGain</link>(<emphasis role="keywordtype">byte</emphasis>&#32;mask)&#32;{
314 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classMFRC522_1aa02ae994a9ebf146475f46fc538cef28">PCD_GetAntennaGain</link>()&#32;!=&#32;mask)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;only&#32;bother&#32;if&#32;there&#32;is&#32;a&#32;change</emphasis>
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1a76193f4f8916f688fe2b7976d0fd1dc2">PCD_ClearRegisterBitMask</link>(RFCfgReg,&#32;(0x07&lt;&lt;4));&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clear&#32;needed&#32;to&#32;allow&#32;000&#32;pattern</emphasis>
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1acebb9a90249419f2a53281c4a13727d1">PCD_SetRegisterBitMask</link>(RFCfgReg,&#32;mask&#32;&amp;&#32;(0x07&lt;&lt;4));&#32;<emphasis role="comment">//&#32;only&#32;set&#32;RxGain[2:0]&#32;bits</emphasis>
317 &#32;&#32;&#32;&#32;}
318 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_SetAntennaGain()</emphasis>
319 
326 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classMFRC522_1a25f052c9c340da34128c365662370b01">MFRC522::PCD_PerformSelfTest</link>()&#32;{
327 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;follows&#32;directly&#32;the&#32;steps&#32;outlined&#32;in&#32;16.1.1</emphasis>
328 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1.&#32;Perform&#32;a&#32;soft&#32;reset.</emphasis>
329 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1a9886678ea0a65021bf602cfb110caa15">PCD_Reset</link>();
330 &#32;&#32;&#32;&#32;
331 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2.&#32;Clear&#32;the&#32;internal&#32;buffer&#32;by&#32;writing&#32;25&#32;bytes&#32;of&#32;00h</emphasis>
332 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;ZEROES[25]&#32;=&#32;{0x00};
333 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(FIFOLevelReg,&#32;0x80);&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;flush&#32;the&#32;FIFO&#32;buffer</emphasis>
334 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(FIFODataReg,&#32;25,&#32;ZEROES);&#32;<emphasis role="comment">//&#32;write&#32;25&#32;bytes&#32;of&#32;00h&#32;to&#32;FIFO</emphasis>
335 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(CommandReg,&#32;PCD_Mem);&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;transfer&#32;to&#32;internal&#32;buffer</emphasis>
336 &#32;&#32;&#32;&#32;
337 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3.&#32;Enable&#32;self-test</emphasis>
338 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(AutoTestReg,&#32;0x09);
339 &#32;&#32;&#32;&#32;
340 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;4.&#32;Write&#32;00h&#32;to&#32;FIFO&#32;buffer</emphasis>
341 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(FIFODataReg,&#32;0x00);
342 &#32;&#32;&#32;&#32;
343 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;5.&#32;Start&#32;self-test&#32;by&#32;issuing&#32;the&#32;CalcCRC&#32;command</emphasis>
344 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(CommandReg,&#32;PCD_CalcCRC);
345 &#32;&#32;&#32;&#32;
346 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;6.&#32;Wait&#32;for&#32;self-test&#32;to&#32;complete</emphasis>
347 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;n;
348 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint8_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;0xFF;&#32;i++)&#32;{
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;datasheet&#32;does&#32;not&#32;specify&#32;exact&#32;completion&#32;condition&#32;except</emphasis>
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;that&#32;FIFO&#32;buffer&#32;should&#32;contain&#32;64&#32;bytes.</emphasis>
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;While&#32;selftest&#32;is&#32;initiated&#32;by&#32;CalcCRC&#32;command</emphasis>
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;it&#32;behaves&#32;differently&#32;from&#32;normal&#32;CRC&#32;computation,</emphasis>
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;one&#32;can&apos;t&#32;reliably&#32;use&#32;DivIrqReg&#32;to&#32;check&#32;for&#32;completion.</emphasis>
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&#32;is&#32;reported&#32;that&#32;some&#32;devices&#32;does&#32;not&#32;trigger&#32;CRCIRq&#32;flag</emphasis>
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;during&#32;selftest.</emphasis>
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(FIFOLevelReg);
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;=&#32;64)&#32;{
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
360 &#32;&#32;&#32;&#32;}
361 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(CommandReg,&#32;PCD_Idle);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Stop&#32;calculating&#32;CRC&#32;for&#32;new&#32;content&#32;in&#32;the&#32;FIFO.</emphasis>
362 &#32;&#32;&#32;&#32;
363 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;7.&#32;Read&#32;out&#32;resulting&#32;64&#32;bytes&#32;from&#32;the&#32;FIFO&#32;buffer.</emphasis>
364 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;result[64];
365 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(FIFODataReg,&#32;64,&#32;result,&#32;0);
366 &#32;&#32;&#32;&#32;
367 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Auto&#32;self-test&#32;done</emphasis>
368 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reset&#32;AutoTestReg&#32;register&#32;to&#32;be&#32;0&#32;again.&#32;Required&#32;for&#32;normal&#32;operation.</emphasis>
369 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(AutoTestReg,&#32;0x00);
370 &#32;&#32;&#32;&#32;
371 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Determine&#32;firmware&#32;version&#32;(see&#32;section&#32;9.3.4.8&#32;in&#32;spec)</emphasis>
372 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;version&#32;=&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(VersionReg);
373 &#32;&#32;&#32;&#32;
374 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Pick&#32;the&#32;appropriate&#32;reference&#32;values</emphasis>
375 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*reference;
376 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(version)&#32;{
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x88:&#32;&#32;<emphasis role="comment">//&#32;Fudan&#32;Semiconductor&#32;FM17522&#32;clone</emphasis>
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference&#32;=&#32;FM17522_firmware_reference;
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x90:&#32;&#32;<emphasis role="comment">//&#32;Version&#32;0.0</emphasis>
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference&#32;=&#32;MFRC522_firmware_referenceV0_0;
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x91:&#32;&#32;<emphasis role="comment">//&#32;Version&#32;1.0</emphasis>
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference&#32;=&#32;MFRC522_firmware_referenceV1_0;
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x92:&#32;&#32;<emphasis role="comment">//&#32;Version&#32;2.0</emphasis>
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference&#32;=&#32;MFRC522_firmware_referenceV2_0;
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Unknown&#32;version</emphasis>
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;<emphasis role="comment">//&#32;abort&#32;test</emphasis>
391 &#32;&#32;&#32;&#32;}
392 &#32;&#32;&#32;&#32;
393 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Verify&#32;that&#32;the&#32;results&#32;match&#32;up&#32;to&#32;our&#32;expectations</emphasis>
394 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint8_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;64;&#32;i++)&#32;{
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result[i]&#32;!=&#32;pgm_read_byte(&amp;(reference[i])))&#32;{
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
398 &#32;&#32;&#32;&#32;}
399 &#32;&#32;&#32;&#32;
400 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;8.&#32;Perform&#32;a&#32;re-init,&#32;because&#32;PCD&#32;does&#32;not&#32;work&#32;after&#32;test.</emphasis>
401 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reset&#32;does&#32;not&#32;work&#32;as&#32;expected.</emphasis>
402 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;Auto&#32;self-test&#32;done&quot;&#32;does&#32;not&#32;work&#32;as&#32;expected.</emphasis>
403 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1ad681e424fc68a57941bea5702cee05eb">PCD_Init</link>();
404 &#32;&#32;&#32;&#32;
405 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;passed;&#32;all&#32;is&#32;good.</emphasis>
406 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
407 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_PerformSelfTest()</emphasis>
408 
410 <emphasis role="comment">//&#32;Power&#32;control</emphasis>
412 
413 <emphasis role="comment">//IMPORTANT&#32;NOTE!!!!</emphasis>
414 <emphasis role="comment">//Calling&#32;any&#32;other&#32;function&#32;that&#32;uses&#32;CommandReg&#32;will&#32;disable&#32;soft&#32;power&#32;down&#32;mode&#32;!!!</emphasis>
415 <emphasis role="comment">//For&#32;more&#32;details&#32;about&#32;power&#32;control,&#32;refer&#32;to&#32;the&#32;datasheet&#32;-&#32;page&#32;33&#32;(8.6)</emphasis>
416 
417 <emphasis role="keywordtype">void</emphasis>&#32;MFRC522::PCD_SoftPowerDown(){<emphasis role="comment">//Note&#32;:&#32;Only&#32;soft&#32;power&#32;down&#32;mode&#32;is&#32;available&#32;throught&#32;software</emphasis>
418 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;val&#32;=&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(CommandReg);&#32;<emphasis role="comment">//&#32;Read&#32;state&#32;of&#32;the&#32;command&#32;register&#32;</emphasis>
419 &#32;&#32;&#32;&#32;val&#32;|=&#32;(1&lt;&lt;4);<emphasis role="comment">//&#32;set&#32;PowerDown&#32;bit&#32;(&#32;bit&#32;4&#32;)&#32;to&#32;1&#32;</emphasis>
420 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(CommandReg,&#32;val);<emphasis role="comment">//write&#32;new&#32;value&#32;to&#32;the&#32;command&#32;register</emphasis>
421 }
422 
423 <emphasis role="keywordtype">void</emphasis>&#32;MFRC522::PCD_SoftPowerUp(){
424 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;val&#32;=&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(CommandReg);&#32;<emphasis role="comment">//&#32;Read&#32;state&#32;of&#32;the&#32;command&#32;register&#32;</emphasis>
425 &#32;&#32;&#32;&#32;val&#32;&amp;=&#32;~(1&lt;&lt;4);<emphasis role="comment">//&#32;set&#32;PowerDown&#32;bit&#32;(&#32;bit&#32;4&#32;)&#32;to&#32;0&#32;</emphasis>
426 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(CommandReg,&#32;val);<emphasis role="comment">//write&#32;new&#32;value&#32;to&#32;the&#32;command&#32;register</emphasis>
427 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;wait&#32;until&#32;PowerDown&#32;bit&#32;is&#32;cleared&#32;(this&#32;indicates&#32;end&#32;of&#32;wake&#32;up&#32;procedure)&#32;</emphasis>
428 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint32_t&#32;timeout&#32;=&#32;(uint32_t)millis()&#32;+&#32;500;<emphasis role="comment">//&#32;create&#32;timer&#32;for&#32;timeout&#32;(just&#32;in&#32;case)&#32;</emphasis>
429 &#32;&#32;&#32;&#32;
430 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(millis()&lt;=timeout){&#32;<emphasis role="comment">//&#32;set&#32;timeout&#32;to&#32;500&#32;ms&#32;</emphasis>
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val&#32;=&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(CommandReg);<emphasis role="comment">//&#32;Read&#32;state&#32;of&#32;the&#32;command&#32;register</emphasis>
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!(val&#32;&amp;&#32;(1&lt;&lt;4))){&#32;<emphasis role="comment">//&#32;if&#32;powerdown&#32;bit&#32;is&#32;0&#32;</emphasis>
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;<emphasis role="comment">//&#32;wake&#32;up&#32;procedure&#32;is&#32;finished&#32;</emphasis>
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yield();
436 &#32;&#32;&#32;&#32;}
437 }
438 
440 <emphasis role="comment">//&#32;Functions&#32;for&#32;communicating&#32;with&#32;PICCs</emphasis>
442 
449 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1aaa96aa7ec4f95e0835cb758ad0450d74">MFRC522::PCD_TransceiveData</link>(&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*sendData,&#32;&#32;&#32;&#32;&#32;
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;sendLen,&#32;&#32;&#32;&#32;&#32;&#32;&#32;
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*backData,&#32;&#32;&#32;&#32;&#32;
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*backLen,&#32;&#32;&#32;&#32;&#32;&#32;
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*validBits,&#32;&#32;&#32;&#32;
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;rxAlign,&#32;&#32;&#32;&#32;&#32;&#32;&#32;
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;checkCRC&#32;&#32;&#32;&#32;&#32;&#32;&#32;
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
457 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;waitIRq&#32;=&#32;0x30;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;RxIRq&#32;and&#32;IdleIRq</emphasis>
458 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classMFRC522_1acb2b1e74bc49fda2704450a684faa845">PCD_CommunicateWithPICC</link>(PCD_Transceive,&#32;waitIRq,&#32;sendData,&#32;sendLen,&#32;backData,&#32;backLen,&#32;validBits,&#32;rxAlign,&#32;checkCRC);
459 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_TransceiveData()</emphasis>
460 
467 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1acb2b1e74bc49fda2704450a684faa845">MFRC522::PCD_CommunicateWithPICC</link>(&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;command,&#32;&#32;&#32;&#32;&#32;&#32;&#32;
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;waitIRq,&#32;&#32;&#32;&#32;&#32;&#32;&#32;
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*sendData,&#32;&#32;&#32;&#32;&#32;
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;sendLen,&#32;&#32;&#32;&#32;&#32;&#32;&#32;
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*backData,&#32;&#32;&#32;&#32;&#32;
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*backLen,&#32;&#32;&#32;&#32;&#32;&#32;
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*validBits,&#32;&#32;&#32;&#32;
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;rxAlign,&#32;&#32;&#32;&#32;&#32;&#32;&#32;
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;checkCRC&#32;&#32;&#32;&#32;&#32;&#32;&#32;
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
477 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Prepare&#32;values&#32;for&#32;BitFramingReg</emphasis>
478 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;txLastBits&#32;=&#32;validBits&#32;?&#32;*validBits&#32;:&#32;0;
479 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;bitFraming&#32;=&#32;(rxAlign&#32;&lt;&lt;&#32;4)&#32;+&#32;txLastBits;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;RxAlign&#32;=&#32;BitFramingReg[6..4].&#32;TxLastBits&#32;=&#32;BitFramingReg[2..0]</emphasis>
480 &#32;&#32;&#32;&#32;
481 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(CommandReg,&#32;PCD_Idle);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Stop&#32;any&#32;active&#32;command.</emphasis>
482 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(ComIrqReg,&#32;0x7F);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Clear&#32;all&#32;seven&#32;interrupt&#32;request&#32;bits</emphasis>
483 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(FIFOLevelReg,&#32;0x80);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FlushBuffer&#32;=&#32;1,&#32;FIFO&#32;initialization</emphasis>
484 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(FIFODataReg,&#32;sendLen,&#32;sendData);&#32;&#32;<emphasis role="comment">//&#32;Write&#32;sendData&#32;to&#32;the&#32;FIFO</emphasis>
485 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(BitFramingReg,&#32;bitFraming);&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Bit&#32;adjustments</emphasis>
486 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(CommandReg,&#32;command);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Execute&#32;the&#32;command</emphasis>
487 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(command&#32;==&#32;PCD_Transceive)&#32;{
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1acebb9a90249419f2a53281c4a13727d1">PCD_SetRegisterBitMask</link>(BitFramingReg,&#32;0x80);&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;StartSend=1,&#32;transmission&#32;of&#32;data&#32;starts</emphasis>
489 &#32;&#32;&#32;&#32;}
490 &#32;&#32;&#32;&#32;
491 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;PCD_Init()&#32;we&#32;set&#32;the&#32;TAuto&#32;flag&#32;in&#32;TModeReg.&#32;This&#32;means&#32;the&#32;timer</emphasis>
492 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;automatically&#32;starts&#32;when&#32;the&#32;PCD&#32;stops&#32;transmitting.</emphasis>
493 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
494 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Wait&#32;here&#32;for&#32;the&#32;command&#32;to&#32;complete.&#32;The&#32;bits&#32;specified&#32;in&#32;the</emphasis>
495 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;`waitIRq`&#32;parameter&#32;define&#32;what&#32;bits&#32;constitute&#32;a&#32;completed&#32;command.</emphasis>
496 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;they&#32;are&#32;set&#32;in&#32;the&#32;ComIrqReg&#32;register,&#32;then&#32;the&#32;command&#32;is</emphasis>
497 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;considered&#32;complete.&#32;If&#32;the&#32;command&#32;is&#32;not&#32;indicated&#32;as&#32;complete&#32;in</emphasis>
498 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;~36ms,&#32;then&#32;consider&#32;the&#32;command&#32;as&#32;timed&#32;out.</emphasis>
499 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint32_t&#32;deadline&#32;=&#32;millis()&#32;+&#32;36;
500 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;completed&#32;=&#32;<emphasis role="keyword">false</emphasis>;
501 
502 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;n&#32;=&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(ComIrqReg);&#32;&#32;&#32;<emphasis role="comment">//&#32;ComIrqReg[7..0]&#32;bits&#32;are:&#32;Set1&#32;TxIRq&#32;RxIRq&#32;IdleIRq&#32;HiAlertIRq&#32;LoAlertIRq&#32;ErrIRq&#32;TimerIRq</emphasis>
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&amp;&#32;waitIRq)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;One&#32;of&#32;the&#32;interrupts&#32;that&#32;signal&#32;success&#32;has&#32;been&#32;set.</emphasis>
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;completed&#32;=&#32;<emphasis role="keyword">true</emphasis>;
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&amp;&#32;0x01)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Timer&#32;interrupt&#32;-&#32;nothing&#32;received&#32;in&#32;25ms</emphasis>
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_TIMEOUT;
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yield();
512 &#32;&#32;&#32;&#32;}
513 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis>uint32_t<emphasis role="keyword">&gt;</emphasis>&#32;(millis())&#32;&lt;&#32;deadline);
514 
515 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;36ms&#32;and&#32;nothing&#32;happened.&#32;Communication&#32;with&#32;the&#32;MFRC522&#32;might&#32;be&#32;down.</emphasis>
516 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!completed)&#32;{
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_TIMEOUT;
518 &#32;&#32;&#32;&#32;}
519 &#32;&#32;&#32;&#32;
520 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Stop&#32;now&#32;if&#32;any&#32;errors&#32;except&#32;collisions&#32;were&#32;detected.</emphasis>
521 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;errorRegValue&#32;=&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(ErrorReg);&#32;<emphasis role="comment">//&#32;ErrorReg[7..0]&#32;bits&#32;are:&#32;WrErr&#32;TempErr&#32;reserved&#32;BufferOvfl&#32;CollErr&#32;CRCErr&#32;ParityErr&#32;ProtocolErr</emphasis>
522 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(errorRegValue&#32;&amp;&#32;0x13)&#32;{&#32;&#32;<emphasis role="comment">//&#32;BufferOvfl&#32;ParityErr&#32;ProtocolErr</emphasis>
523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_ERROR;
524 &#32;&#32;&#32;&#32;}
525 &#32;&#32;
526 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;_validBits&#32;=&#32;0;
527 &#32;&#32;&#32;&#32;
528 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;caller&#32;wants&#32;data&#32;back,&#32;get&#32;it&#32;from&#32;the&#32;MFRC522.</emphasis>
529 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(backData&#32;&amp;&amp;&#32;backLen)&#32;{
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;n&#32;=&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(FIFOLevelReg);&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;bytes&#32;in&#32;the&#32;FIFO</emphasis>
531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;&#32;*backLen)&#32;{
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_NO_ROOM;
533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*backLen&#32;=&#32;n;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;bytes&#32;returned</emphasis>
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(FIFODataReg,&#32;n,&#32;backData,&#32;rxAlign);&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;received&#32;data&#32;from&#32;FIFO</emphasis>
536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_validBits&#32;=&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(ControlReg)&#32;&amp;&#32;0x07;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;RxLastBits[2:0]&#32;indicates&#32;the&#32;number&#32;of&#32;valid&#32;bits&#32;in&#32;the&#32;last&#32;received&#32;byte.&#32;If&#32;this&#32;value&#32;is&#32;000b,&#32;the&#32;whole&#32;byte&#32;is&#32;valid.</emphasis>
537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(validBits)&#32;{
538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*validBits&#32;=&#32;_validBits;
539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
540 &#32;&#32;&#32;&#32;}
541 &#32;&#32;&#32;&#32;
542 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Tell&#32;about&#32;collisions</emphasis>
543 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(errorRegValue&#32;&amp;&#32;0x08)&#32;{&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;CollErr</emphasis>
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_COLLISION;
545 &#32;&#32;&#32;&#32;}
546 &#32;&#32;&#32;&#32;
547 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Perform&#32;CRC_A&#32;validation&#32;if&#32;requested.</emphasis>
548 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(backData&#32;&amp;&amp;&#32;backLen&#32;&amp;&amp;&#32;checkCRC)&#32;{
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;this&#32;case&#32;a&#32;MIFARE&#32;Classic&#32;NAK&#32;is&#32;not&#32;OK.</emphasis>
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*backLen&#32;==&#32;1&#32;&amp;&amp;&#32;_validBits&#32;==&#32;4)&#32;{
551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_MIFARE_NACK;
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;need&#32;at&#32;least&#32;the&#32;CRC_A&#32;value&#32;and&#32;all&#32;8&#32;bits&#32;of&#32;the&#32;last&#32;byte&#32;must&#32;be&#32;received.</emphasis>
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*backLen&#32;&lt;&#32;2&#32;||&#32;_validBits&#32;!=&#32;0)&#32;{
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_CRC_WRONG;
556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Verify&#32;CRC_A&#32;-&#32;do&#32;our&#32;own&#32;calculation&#32;and&#32;store&#32;the&#32;control&#32;in&#32;controlBuffer.</emphasis>
558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;controlBuffer[2];
559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MFRC522::StatusCode&#32;status&#32;=&#32;<link linkend="_classMFRC522_1a7c65647b1d72b6ee7557797322030643">PCD_CalculateCRC</link>(&amp;backData[0],&#32;*backLen&#32;-&#32;2,&#32;&amp;controlBuffer[0]);
560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;!=&#32;STATUS_OK)&#32;{
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((backData[*backLen&#32;-&#32;2]&#32;!=&#32;controlBuffer[0])&#32;||&#32;(backData[*backLen&#32;-&#32;1]&#32;!=&#32;controlBuffer[1]))&#32;{
564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_CRC_WRONG;
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
566 &#32;&#32;&#32;&#32;}
567 &#32;&#32;&#32;&#32;
568 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_OK;
569 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_CommunicateWithPICC()</emphasis>
570 
577 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1a4e0ac6edf5e8f6ade351b009278fbbc7">MFRC522::PICC_RequestA</link>(&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*bufferATQA,&#32;&#32;&#32;
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*bufferSize&#32;&#32;&#32;&#32;
579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
580 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classMFRC522_1a639d27ac072bc0dfa478d0957591afcc">PICC_REQA_or_WUPA</link>(PICC_CMD_REQA,&#32;bufferATQA,&#32;bufferSize);
581 }&#32;<emphasis role="comment">//&#32;End&#32;PICC_RequestA()</emphasis>
582 
589 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1ad00a1efcfa6dc203ca885d43f4d02125">MFRC522::PICC_WakeupA</link>(&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*bufferATQA,&#32;&#32;&#32;
590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*bufferSize&#32;&#32;&#32;&#32;
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
592 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classMFRC522_1a639d27ac072bc0dfa478d0957591afcc">PICC_REQA_or_WUPA</link>(PICC_CMD_WUPA,&#32;bufferATQA,&#32;bufferSize);
593 }&#32;<emphasis role="comment">//&#32;End&#32;PICC_WakeupA()</emphasis>
594 
601 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1a639d27ac072bc0dfa478d0957591afcc">MFRC522::PICC_REQA_or_WUPA</link>(&#32;<emphasis role="keywordtype">byte</emphasis>&#32;command,&#32;&#32;&#32;&#32;&#32;&#32;&#32;
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*bufferATQA,&#32;&#32;&#32;
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*bufferSize&#32;&#32;&#32;&#32;
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
605 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;validBits;
606 &#32;&#32;&#32;&#32;MFRC522::StatusCode&#32;status;
607 &#32;&#32;&#32;&#32;
608 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bufferATQA&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>&#32;||&#32;*bufferSize&#32;&lt;&#32;2)&#32;{&#32;<emphasis role="comment">//&#32;The&#32;ATQA&#32;response&#32;is&#32;2&#32;bytes&#32;long.</emphasis>
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_NO_ROOM;
610 &#32;&#32;&#32;&#32;}
611 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1a76193f4f8916f688fe2b7976d0fd1dc2">PCD_ClearRegisterBitMask</link>(CollReg,&#32;0x80);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ValuesAfterColl=1&#32;=&gt;&#32;Bits&#32;received&#32;after&#32;collision&#32;are&#32;cleared.</emphasis>
612 &#32;&#32;&#32;&#32;validBits&#32;=&#32;7;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;REQA&#32;and&#32;WUPA&#32;we&#32;need&#32;the&#32;short&#32;frame&#32;format&#32;-&#32;transmit&#32;only&#32;7&#32;bits&#32;of&#32;the&#32;last&#32;(and&#32;only)&#32;byte.&#32;TxLastBits&#32;=&#32;BitFramingReg[2..0]</emphasis>
613 &#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="_classMFRC522_1aaa96aa7ec4f95e0835cb758ad0450d74">PCD_TransceiveData</link>(&amp;command,&#32;1,&#32;bufferATQA,&#32;bufferSize,&#32;&amp;validBits);
614 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;!=&#32;STATUS_OK)&#32;{
615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
616 &#32;&#32;&#32;&#32;}
617 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*bufferSize&#32;!=&#32;2&#32;||&#32;validBits&#32;!=&#32;0)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ATQA&#32;must&#32;be&#32;exactly&#32;16&#32;bits.</emphasis>
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_ERROR;
619 &#32;&#32;&#32;&#32;}
620 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_OK;
621 }&#32;<emphasis role="comment">//&#32;End&#32;PICC_REQA_or_WUPA()</emphasis>
622 
640 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1a7a78c629cb4e1d90cc2d7526b17d6c22">MFRC522::PICC_Select</link>(&#32;&#32;&#32;<link linkend="_classMFRC522_1structMFRC522_1_1Uid">Uid</link>&#32;*uid,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;validBits&#32;&#32;&#32;&#32;&#32;&#32;
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
643 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;uidComplete;
644 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;selectDone;
645 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;useCascadeTag;
646 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;cascadeLevel&#32;=&#32;1;
647 &#32;&#32;&#32;&#32;MFRC522::StatusCode&#32;result;
648 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;count;
649 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;checkBit;
650 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;index;
651 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;uidIndex;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;first&#32;index&#32;in&#32;uid-&gt;uidByte[]&#32;that&#32;is&#32;used&#32;in&#32;the&#32;current&#32;Cascade&#32;Level.</emphasis>
652 &#32;&#32;&#32;&#32;int8_t&#32;currentLevelKnownBits;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;number&#32;of&#32;known&#32;UID&#32;bits&#32;in&#32;the&#32;current&#32;Cascade&#32;Level.</emphasis>
653 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;buffer[9];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;SELECT/ANTICOLLISION&#32;commands&#32;uses&#32;a&#32;7&#32;byte&#32;standard&#32;frame&#32;+&#32;2&#32;bytes&#32;CRC_A</emphasis>
654 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;bufferUsed;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;number&#32;of&#32;bytes&#32;used&#32;in&#32;the&#32;buffer,&#32;ie&#32;the&#32;number&#32;of&#32;bytes&#32;to&#32;transfer&#32;to&#32;the&#32;FIFO.</emphasis>
655 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;rxAlign;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Used&#32;in&#32;BitFramingReg.&#32;Defines&#32;the&#32;bit&#32;position&#32;for&#32;the&#32;first&#32;bit&#32;received.</emphasis>
656 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;txLastBits;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Used&#32;in&#32;BitFramingReg.&#32;The&#32;number&#32;of&#32;valid&#32;bits&#32;in&#32;the&#32;last&#32;transmitted&#32;byte.&#32;</emphasis>
657 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*responseBuffer;
658 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;responseLength;
659 &#32;&#32;&#32;&#32;
660 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Description&#32;of&#32;buffer&#32;structure:</emphasis>
661 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;Byte&#32;0:&#32;SEL&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Indicates&#32;the&#32;Cascade&#32;Level:&#32;PICC_CMD_SEL_CL1,&#32;PICC_CMD_SEL_CL2&#32;or&#32;PICC_CMD_SEL_CL3</emphasis>
662 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;Byte&#32;1:&#32;NVB&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Number&#32;of&#32;Valid&#32;Bits&#32;(in&#32;complete&#32;command,&#32;not&#32;just&#32;the&#32;UID):&#32;High&#32;nibble:&#32;complete&#32;bytes,&#32;Low&#32;nibble:&#32;Extra&#32;bits.&#32;</emphasis>
663 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;Byte&#32;2:&#32;UID-data&#32;or&#32;CT&#32;&#32;&#32;&#32;&#32;&#32;See&#32;explanation&#32;below.&#32;CT&#32;means&#32;Cascade&#32;Tag.</emphasis>
664 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;Byte&#32;3:&#32;UID-data</emphasis>
665 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;Byte&#32;4:&#32;UID-data</emphasis>
666 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;Byte&#32;5:&#32;UID-data</emphasis>
667 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;Byte&#32;6:&#32;BCC&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Block&#32;Check&#32;Character&#32;-&#32;XOR&#32;of&#32;bytes&#32;2-5</emphasis>
668 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;Byte&#32;7:&#32;CRC_A</emphasis>
669 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;Byte&#32;8:&#32;CRC_A</emphasis>
670 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;BCC&#32;and&#32;CRC_A&#32;are&#32;only&#32;transmitted&#32;if&#32;we&#32;know&#32;all&#32;the&#32;UID&#32;bits&#32;of&#32;the&#32;current&#32;Cascade&#32;Level.</emphasis>
671 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
672 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Description&#32;of&#32;bytes&#32;2-5:&#32;(Section&#32;6.5.4&#32;of&#32;the&#32;ISO/IEC&#32;14443-3&#32;draft:&#32;UID&#32;contents&#32;and&#32;cascade&#32;levels)</emphasis>
673 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;UID&#32;size&#32;&#32;&#32;&#32;Cascade&#32;level&#32;&#32;&#32;Byte2&#32;&#32;&#32;Byte3&#32;&#32;&#32;Byte4&#32;&#32;&#32;Byte5</emphasis>
674 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;========&#32;&#32;&#32;&#32;=============&#32;&#32;&#32;=====&#32;&#32;&#32;=====&#32;&#32;&#32;=====&#32;&#32;&#32;=====</emphasis>
675 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;4&#32;bytes&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uid0&#32;&#32;&#32;&#32;uid1&#32;&#32;&#32;&#32;uid2&#32;&#32;&#32;&#32;uid3</emphasis>
676 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;7&#32;bytes&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CT&#32;&#32;&#32;&#32;&#32;&#32;uid0&#32;&#32;&#32;&#32;uid1&#32;&#32;&#32;&#32;uid2</emphasis>
677 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uid3&#32;&#32;&#32;&#32;uid4&#32;&#32;&#32;&#32;uid5&#32;&#32;&#32;&#32;uid6</emphasis>
678 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;10&#32;bytes&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CT&#32;&#32;&#32;&#32;&#32;&#32;uid0&#32;&#32;&#32;&#32;uid1&#32;&#32;&#32;&#32;uid2</emphasis>
679 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CT&#32;&#32;&#32;&#32;&#32;&#32;uid3&#32;&#32;&#32;&#32;uid4&#32;&#32;&#32;&#32;uid5</emphasis>
680 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uid6&#32;&#32;&#32;&#32;uid7&#32;&#32;&#32;&#32;uid8&#32;&#32;&#32;&#32;uid9</emphasis>
681 &#32;&#32;&#32;&#32;
682 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sanity&#32;checks</emphasis>
683 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(validBits&#32;&gt;&#32;80)&#32;{
684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_INVALID;
685 &#32;&#32;&#32;&#32;}
686 &#32;&#32;&#32;&#32;
687 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Prepare&#32;MFRC522</emphasis>
688 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1a76193f4f8916f688fe2b7976d0fd1dc2">PCD_ClearRegisterBitMask</link>(CollReg,&#32;0x80);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ValuesAfterColl=1&#32;=&gt;&#32;Bits&#32;received&#32;after&#32;collision&#32;are&#32;cleared.</emphasis>
689 &#32;&#32;&#32;&#32;
690 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Repeat&#32;Cascade&#32;Level&#32;loop&#32;until&#32;we&#32;have&#32;a&#32;complete&#32;UID.</emphasis>
691 &#32;&#32;&#32;&#32;uidComplete&#32;=&#32;<emphasis role="keyword">false</emphasis>;
692 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!uidComplete)&#32;{
693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;Cascade&#32;Level&#32;in&#32;the&#32;SEL&#32;byte,&#32;find&#32;out&#32;if&#32;we&#32;need&#32;to&#32;use&#32;the&#32;Cascade&#32;Tag&#32;in&#32;byte&#32;2.</emphasis>
694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(cascadeLevel)&#32;{
695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:
696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer[0]&#32;=&#32;PICC_CMD_SEL_CL1;
697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uidIndex&#32;=&#32;0;
698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;useCascadeTag&#32;=&#32;validBits&#32;&amp;&amp;&#32;uid-&gt;size&#32;&gt;&#32;4;&#32;<emphasis role="comment">//&#32;When&#32;we&#32;know&#32;that&#32;the&#32;UID&#32;has&#32;more&#32;than&#32;4&#32;bytes</emphasis>
699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:
702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer[0]&#32;=&#32;PICC_CMD_SEL_CL2;
703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uidIndex&#32;=&#32;3;
704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;useCascadeTag&#32;=&#32;validBits&#32;&amp;&amp;&#32;uid-&gt;size&#32;&gt;&#32;7;&#32;<emphasis role="comment">//&#32;When&#32;we&#32;know&#32;that&#32;the&#32;UID&#32;has&#32;more&#32;than&#32;7&#32;bytes</emphasis>
705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;3:
708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer[0]&#32;=&#32;PICC_CMD_SEL_CL3;
709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uidIndex&#32;=&#32;6;
710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;useCascadeTag&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Never&#32;used&#32;in&#32;CL3.</emphasis>
711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_INTERNAL_ERROR;
715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;How&#32;many&#32;UID&#32;bits&#32;are&#32;known&#32;in&#32;this&#32;Cascade&#32;Level?</emphasis>
719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentLevelKnownBits&#32;=&#32;validBits&#32;-&#32;(8&#32;*&#32;uidIndex);
720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(currentLevelKnownBits&#32;&lt;&#32;0)&#32;{
721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentLevelKnownBits&#32;=&#32;0;
722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;the&#32;known&#32;bits&#32;from&#32;uid-&gt;uidByte[]&#32;to&#32;buffer[]</emphasis>
724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index&#32;=&#32;2;&#32;<emphasis role="comment">//&#32;destination&#32;index&#32;in&#32;buffer[]</emphasis>
725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(useCascadeTag)&#32;{
726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer[index++]&#32;=&#32;PICC_CMD_CT;
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;bytesToCopy&#32;=&#32;currentLevelKnownBits&#32;/&#32;8&#32;+&#32;(currentLevelKnownBits&#32;%&#32;8&#32;?&#32;1&#32;:&#32;0);&#32;<emphasis role="comment">//&#32;The&#32;number&#32;of&#32;bytes&#32;needed&#32;to&#32;represent&#32;the&#32;known&#32;bits&#32;for&#32;this&#32;level.</emphasis>
729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bytesToCopy)&#32;{
730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;maxBytes&#32;=&#32;useCascadeTag&#32;?&#32;3&#32;:&#32;4;&#32;<emphasis role="comment">//&#32;Max&#32;4&#32;bytes&#32;in&#32;each&#32;Cascade&#32;Level.&#32;Only&#32;3&#32;left&#32;if&#32;we&#32;use&#32;the&#32;Cascade&#32;Tag</emphasis>
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bytesToCopy&#32;&gt;&#32;maxBytes)&#32;{
732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bytesToCopy&#32;=&#32;maxBytes;
733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(count&#32;=&#32;0;&#32;count&#32;&lt;&#32;bytesToCopy;&#32;count++)&#32;{
735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer[index++]&#32;=&#32;uid-&gt;uidByte[uidIndex&#32;+&#32;count];
736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;that&#32;the&#32;data&#32;has&#32;been&#32;copied&#32;we&#32;need&#32;to&#32;include&#32;the&#32;8&#32;bits&#32;in&#32;CT&#32;in&#32;currentLevelKnownBits</emphasis>
739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(useCascadeTag)&#32;{
740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentLevelKnownBits&#32;+=&#32;8;
741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Repeat&#32;anti&#32;collision&#32;loop&#32;until&#32;we&#32;can&#32;transmit&#32;all&#32;UID&#32;bits&#32;+&#32;BCC&#32;and&#32;receive&#32;a&#32;SAK&#32;-&#32;max&#32;32&#32;iterations.</emphasis>
744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;selectDone&#32;=&#32;<emphasis role="keyword">false</emphasis>;
745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!selectDone)&#32;{
746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;out&#32;how&#32;many&#32;bits&#32;and&#32;bytes&#32;to&#32;send&#32;and&#32;receive.</emphasis>
747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(currentLevelKnownBits&#32;&gt;=&#32;32)&#32;{&#32;<emphasis role="comment">//&#32;All&#32;UID&#32;bits&#32;in&#32;this&#32;Cascade&#32;Level&#32;are&#32;known.&#32;This&#32;is&#32;a&#32;SELECT.</emphasis>
748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Serial.print(F(&quot;SELECT:&#32;currentLevelKnownBits=&quot;));&#32;Serial.println(currentLevelKnownBits,&#32;DEC);</emphasis>
749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer[1]&#32;=&#32;0x70;&#32;<emphasis role="comment">//&#32;NVB&#32;-&#32;Number&#32;of&#32;Valid&#32;Bits:&#32;Seven&#32;whole&#32;bytes</emphasis>
750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;BCC&#32;-&#32;Block&#32;Check&#32;Character</emphasis>
751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer[6]&#32;=&#32;buffer[2]&#32;^&#32;buffer[3]&#32;^&#32;buffer[4]&#32;^&#32;buffer[5];
752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;CRC_A</emphasis>
753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_classMFRC522_1a7c65647b1d72b6ee7557797322030643">PCD_CalculateCRC</link>(buffer,&#32;7,&#32;&amp;buffer[7]);
754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;STATUS_OK)&#32;{
755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;txLastBits&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;0&#32;=&gt;&#32;All&#32;8&#32;bits&#32;are&#32;valid.</emphasis>
758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bufferUsed&#32;&#32;&#32;&#32;&#32;&#32;=&#32;9;
759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Store&#32;response&#32;in&#32;the&#32;last&#32;3&#32;bytes&#32;of&#32;buffer&#32;(BCC&#32;and&#32;CRC_A&#32;-&#32;not&#32;needed&#32;after&#32;tx)</emphasis>
760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;responseBuffer&#32;&#32;=&#32;&amp;buffer[6];
761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;responseLength&#32;&#32;=&#32;3;
762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;<emphasis role="comment">//&#32;This&#32;is&#32;an&#32;ANTICOLLISION.</emphasis>
764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Serial.print(F(&quot;ANTICOLLISION:&#32;currentLevelKnownBits=&quot;));&#32;Serial.println(currentLevelKnownBits,&#32;DEC);</emphasis>
765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;txLastBits&#32;&#32;&#32;&#32;&#32;&#32;=&#32;currentLevelKnownBits&#32;%&#32;8;
766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;currentLevelKnownBits&#32;/&#32;8;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;whole&#32;bytes&#32;in&#32;the&#32;UID&#32;part.</emphasis>
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;2&#32;+&#32;count;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;whole&#32;bytes:&#32;SEL&#32;+&#32;NVB&#32;+&#32;UIDs</emphasis>
768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer[1]&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(index&#32;&lt;&lt;&#32;4)&#32;+&#32;txLastBits;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NVB&#32;-&#32;Number&#32;of&#32;Valid&#32;Bits</emphasis>
769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bufferUsed&#32;&#32;&#32;&#32;&#32;&#32;=&#32;index&#32;+&#32;(txLastBits&#32;?&#32;1&#32;:&#32;0);
770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Store&#32;response&#32;in&#32;the&#32;unused&#32;part&#32;of&#32;buffer</emphasis>
771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;responseBuffer&#32;&#32;=&#32;&amp;buffer[index];
772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;responseLength&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(buffer)&#32;-&#32;index;
773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;bit&#32;adjustments</emphasis>
776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rxAlign&#32;=&#32;txLastBits;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Having&#32;a&#32;separate&#32;variable&#32;is&#32;overkill.&#32;But&#32;it&#32;makes&#32;the&#32;next&#32;line&#32;easier&#32;to&#32;read.</emphasis>
777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(BitFramingReg,&#32;(rxAlign&#32;&lt;&lt;&#32;4)&#32;+&#32;txLastBits);&#32;&#32;<emphasis role="comment">//&#32;RxAlign&#32;=&#32;BitFramingReg[6..4].&#32;TxLastBits&#32;=&#32;BitFramingReg[2..0]</emphasis>
778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Transmit&#32;the&#32;buffer&#32;and&#32;receive&#32;the&#32;response.</emphasis>
780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_classMFRC522_1aaa96aa7ec4f95e0835cb758ad0450d74">PCD_TransceiveData</link>(buffer,&#32;bufferUsed,&#32;responseBuffer,&#32;&amp;responseLength,&#32;&amp;txLastBits,&#32;rxAlign);
781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;==&#32;STATUS_COLLISION)&#32;{&#32;<emphasis role="comment">//&#32;More&#32;than&#32;one&#32;PICC&#32;in&#32;the&#32;field&#32;=&gt;&#32;collision.</emphasis>
782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;valueOfCollReg&#32;=&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(CollReg);&#32;<emphasis role="comment">//&#32;CollReg[7..0]&#32;bits&#32;are:&#32;ValuesAfterColl&#32;reserved&#32;CollPosNotValid&#32;CollPos[4:0]</emphasis>
783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(valueOfCollReg&#32;&amp;&#32;0x20)&#32;{&#32;<emphasis role="comment">//&#32;CollPosNotValid</emphasis>
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_COLLISION;&#32;<emphasis role="comment">//&#32;Without&#32;a&#32;valid&#32;collision&#32;position&#32;we&#32;cannot&#32;continue</emphasis>
785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;collisionPos&#32;=&#32;valueOfCollReg&#32;&amp;&#32;0x1F;&#32;<emphasis role="comment">//&#32;Values&#32;0-31,&#32;0&#32;means&#32;bit&#32;32.</emphasis>
787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(collisionPos&#32;==&#32;0)&#32;{
788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;collisionPos&#32;=&#32;32;
789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(collisionPos&#32;&lt;=&#32;currentLevelKnownBits)&#32;{&#32;<emphasis role="comment">//&#32;No&#32;progress&#32;-&#32;should&#32;not&#32;happen&#32;</emphasis>
791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_INTERNAL_ERROR;
792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Choose&#32;the&#32;PICC&#32;with&#32;the&#32;bit&#32;set.</emphasis>
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentLevelKnownBits&#32;&#32;&#32;=&#32;collisionPos;
795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;currentLevelKnownBits&#32;%&#32;8;&#32;<emphasis role="comment">//&#32;The&#32;bit&#32;to&#32;modify</emphasis>
796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;checkBit&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(currentLevelKnownBits&#32;-&#32;1)&#32;%&#32;8;
797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1&#32;+&#32;(currentLevelKnownBits&#32;/&#32;8)&#32;+&#32;(count&#32;?&#32;1&#32;:&#32;0);&#32;<emphasis role="comment">//&#32;First&#32;byte&#32;is&#32;index&#32;0.</emphasis>
798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer[index]&#32;&#32;&#32;|=&#32;(1&#32;&lt;&lt;&#32;checkBit);
799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;STATUS_OK)&#32;{
801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;<emphasis role="comment">//&#32;STATUS_OK</emphasis>
804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(currentLevelKnownBits&#32;&gt;=&#32;32)&#32;{&#32;<emphasis role="comment">//&#32;This&#32;was&#32;a&#32;SELECT.</emphasis>
805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;selectDone&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="comment">//&#32;No&#32;more&#32;anticollision&#32;</emphasis>
806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;continue&#32;below&#32;outside&#32;the&#32;while.</emphasis>
807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;<emphasis role="comment">//&#32;This&#32;was&#32;an&#32;ANTICOLLISION.</emphasis>
809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;now&#32;have&#32;all&#32;32&#32;bits&#32;of&#32;the&#32;UID&#32;in&#32;this&#32;Cascade&#32;Level</emphasis>
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentLevelKnownBits&#32;=&#32;32;
811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Run&#32;loop&#32;again&#32;to&#32;do&#32;the&#32;SELECT.</emphasis>
812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;End&#32;of&#32;while&#32;(!selectDone)</emphasis>
815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;do&#32;not&#32;check&#32;the&#32;CBB&#32;-&#32;it&#32;was&#32;constructed&#32;by&#32;us&#32;above.</emphasis>
817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;the&#32;found&#32;UID&#32;bytes&#32;from&#32;buffer[]&#32;to&#32;uid-&gt;uidByte[]</emphasis>
819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(buffer[2]&#32;==&#32;PICC_CMD_CT)&#32;?&#32;3&#32;:&#32;2;&#32;<emphasis role="comment">//&#32;source&#32;index&#32;in&#32;buffer[]</emphasis>
820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bytesToCopy&#32;&#32;&#32;&#32;&#32;=&#32;(buffer[2]&#32;==&#32;PICC_CMD_CT)&#32;?&#32;3&#32;:&#32;4;
821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(count&#32;=&#32;0;&#32;count&#32;&lt;&#32;bytesToCopy;&#32;count++)&#32;{
822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uid-&gt;uidByte[uidIndex&#32;+&#32;count]&#32;=&#32;buffer[index++];
823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;response&#32;SAK&#32;(Select&#32;Acknowledge)</emphasis>
826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(responseLength&#32;!=&#32;3&#32;||&#32;txLastBits&#32;!=&#32;0)&#32;{&#32;<emphasis role="comment">//&#32;SAK&#32;must&#32;be&#32;exactly&#32;24&#32;bits&#32;(1&#32;byte&#32;+&#32;CRC_A).</emphasis>
827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_ERROR;
828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Verify&#32;CRC_A&#32;-&#32;do&#32;our&#32;own&#32;calculation&#32;and&#32;store&#32;the&#32;control&#32;in&#32;buffer[2..3]&#32;-&#32;those&#32;bytes&#32;are&#32;not&#32;needed&#32;anymore.</emphasis>
830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_classMFRC522_1a7c65647b1d72b6ee7557797322030643">PCD_CalculateCRC</link>(responseBuffer,&#32;1,&#32;&amp;buffer[2]);
831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;STATUS_OK)&#32;{
832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((buffer[2]&#32;!=&#32;responseBuffer[1])&#32;||&#32;(buffer[3]&#32;!=&#32;responseBuffer[2]))&#32;{
835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_CRC_WRONG;
836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(responseBuffer[0]&#32;&amp;&#32;0x04)&#32;{&#32;<emphasis role="comment">//&#32;Cascade&#32;bit&#32;set&#32;-&#32;UID&#32;not&#32;complete&#32;yes</emphasis>
838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cascadeLevel++;
839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uidComplete&#32;=&#32;<emphasis role="keyword">true</emphasis>;
842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uid-&gt;sak&#32;=&#32;responseBuffer[0];
843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
844 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;End&#32;of&#32;while&#32;(!uidComplete)</emphasis>
845 &#32;&#32;&#32;&#32;
846 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;correct&#32;uid-&gt;size</emphasis>
847 &#32;&#32;&#32;&#32;uid-&gt;size&#32;=&#32;3&#32;*&#32;cascadeLevel&#32;+&#32;1;
848 
849 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_OK;
850 }&#32;<emphasis role="comment">//&#32;End&#32;PICC_Select()</emphasis>
851 
857 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1a8874921b4ed26c5b73d89c90f76d4933">MFRC522::PICC_HaltA</link>()&#32;{
858 &#32;&#32;&#32;&#32;MFRC522::StatusCode&#32;result;
859 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;buffer[4];
860 &#32;&#32;&#32;&#32;
861 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Build&#32;command&#32;buffer</emphasis>
862 &#32;&#32;&#32;&#32;buffer[0]&#32;=&#32;PICC_CMD_HLTA;
863 &#32;&#32;&#32;&#32;buffer[1]&#32;=&#32;0;
864 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;CRC_A</emphasis>
865 &#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_classMFRC522_1a7c65647b1d72b6ee7557797322030643">PCD_CalculateCRC</link>(buffer,&#32;2,&#32;&amp;buffer[2]);
866 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;STATUS_OK)&#32;{
867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
868 &#32;&#32;&#32;&#32;}
869 &#32;&#32;&#32;&#32;
870 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Send&#32;the&#32;command.</emphasis>
871 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;standard&#32;says:</emphasis>
872 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;If&#32;the&#32;PICC&#32;responds&#32;with&#32;any&#32;modulation&#32;during&#32;a&#32;period&#32;of&#32;1&#32;ms&#32;after&#32;the&#32;end&#32;of&#32;the&#32;frame&#32;containing&#32;the</emphasis>
873 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;HLTA&#32;command,&#32;this&#32;response&#32;shall&#32;be&#32;interpreted&#32;as&#32;&apos;not&#32;acknowledge&apos;.</emphasis>
874 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;interpret&#32;that&#32;this&#32;way:&#32;Only&#32;STATUS_TIMEOUT&#32;is&#32;a&#32;success.</emphasis>
875 &#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_classMFRC522_1aaa96aa7ec4f95e0835cb758ad0450d74">PCD_TransceiveData</link>(buffer,&#32;<emphasis role="keyword">sizeof</emphasis>(buffer),&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;0);
876 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;==&#32;STATUS_TIMEOUT)&#32;{
877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_OK;
878 &#32;&#32;&#32;&#32;}
879 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;==&#32;STATUS_OK)&#32;{&#32;<emphasis role="comment">//&#32;That&#32;is&#32;ironically&#32;NOT&#32;ok&#32;in&#32;this&#32;case&#32;;-)</emphasis>
880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_ERROR;
881 &#32;&#32;&#32;&#32;}
882 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
883 }&#32;<emphasis role="comment">//&#32;End&#32;PICC_HaltA()</emphasis>
884 
886 <emphasis role="comment">//&#32;Functions&#32;for&#32;communicating&#32;with&#32;MIFARE&#32;PICCs</emphasis>
888 
901 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1a6c2313c4aa98806cc2bf0e9cca993ec0">MFRC522::PCD_Authenticate</link>(<emphasis role="keywordtype">byte</emphasis>&#32;command,&#32;&#32;&#32;&#32;&#32;
902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;blockAddr,&#32;&#32;&#32;&#32;&#32;
903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1structMFRC522_1_1MIFARE__Key">MIFARE_Key</link>&#32;*key,&#32;&#32;&#32;&#32;
904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1structMFRC522_1_1Uid">Uid</link>&#32;*uid&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
906 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;waitIRq&#32;=&#32;0x10;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;IdleIRq</emphasis>
907 &#32;&#32;&#32;&#32;
908 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Build&#32;command&#32;buffer</emphasis>
909 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;sendData[12];
910 &#32;&#32;&#32;&#32;sendData[0]&#32;=&#32;command;
911 &#32;&#32;&#32;&#32;sendData[1]&#32;=&#32;blockAddr;
912 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">byte</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;MF_KEY_SIZE;&#32;i++)&#32;{&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;6&#32;key&#32;bytes</emphasis>
913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sendData[2+i]&#32;=&#32;key-&gt;keyByte[i];
914 &#32;&#32;&#32;&#32;}
915 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;the&#32;last&#32;uid&#32;bytes&#32;as&#32;specified&#32;in&#32;http://cache.nxp.com/documents/application_note/AN10927.pdf</emphasis>
916 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;section&#32;3.2.5&#32;&quot;MIFARE&#32;Classic&#32;Authentication&quot;.</emphasis>
917 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;only&#32;missed&#32;case&#32;is&#32;the&#32;MF1Sxxxx&#32;shortcut&#32;activation,</emphasis>
918 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;but&#32;it&#32;requires&#32;cascade&#32;tag&#32;(CT)&#32;byte,&#32;that&#32;is&#32;not&#32;part&#32;of&#32;uid.</emphasis>
919 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">byte</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;4;&#32;i++)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;last&#32;4&#32;bytes&#32;of&#32;the&#32;UID</emphasis>
920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sendData[8+i]&#32;=&#32;uid-&gt;uidByte[i+uid-&gt;size-4];
921 &#32;&#32;&#32;&#32;}
922 &#32;&#32;&#32;&#32;
923 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Start&#32;the&#32;authentication.</emphasis>
924 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classMFRC522_1acb2b1e74bc49fda2704450a684faa845">PCD_CommunicateWithPICC</link>(PCD_MFAuthent,&#32;waitIRq,&#32;&amp;sendData[0],&#32;<emphasis role="keyword">sizeof</emphasis>(sendData));
925 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_Authenticate()</emphasis>
926 
931 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1a24d3ab7b2170fdfa3f0121a7256f12d9">MFRC522::PCD_StopCrypto1</link>()&#32;{
932 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Clear&#32;MFCrypto1On&#32;bit</emphasis>
933 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1a76193f4f8916f688fe2b7976d0fd1dc2">PCD_ClearRegisterBitMask</link>(Status2Reg,&#32;0x08);&#32;<emphasis role="comment">//&#32;Status2Reg[7..0]&#32;bits&#32;are:&#32;TempSensClear&#32;I2CForceHS&#32;reserved&#32;reserved&#32;MFCrypto1On&#32;ModemState[2:0]</emphasis>
934 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_StopCrypto1()</emphasis>
935 
952 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1a6ed93e88913ea104420f3bb4a88cce52">MFRC522::MIFARE_Read</link>(&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;blockAddr,&#32;&#32;&#32;&#32;&#32;
953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*buffer,&#32;&#32;&#32;&#32;&#32;&#32;&#32;
954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*bufferSize&#32;&#32;&#32;&#32;
955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
956 &#32;&#32;&#32;&#32;MFRC522::StatusCode&#32;result;
957 &#32;&#32;&#32;&#32;
958 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sanity&#32;check</emphasis>
959 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>&#32;||&#32;*bufferSize&#32;&lt;&#32;18)&#32;{
960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_NO_ROOM;
961 &#32;&#32;&#32;&#32;}
962 &#32;&#32;&#32;&#32;
963 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Build&#32;command&#32;buffer</emphasis>
964 &#32;&#32;&#32;&#32;buffer[0]&#32;=&#32;PICC_CMD_MF_READ;
965 &#32;&#32;&#32;&#32;buffer[1]&#32;=&#32;blockAddr;
966 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;CRC_A</emphasis>
967 &#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_classMFRC522_1a7c65647b1d72b6ee7557797322030643">PCD_CalculateCRC</link>(buffer,&#32;2,&#32;&amp;buffer[2]);
968 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;STATUS_OK)&#32;{
969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
970 &#32;&#32;&#32;&#32;}
971 &#32;&#32;&#32;&#32;
972 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Transmit&#32;the&#32;buffer&#32;and&#32;receive&#32;the&#32;response,&#32;validate&#32;CRC_A.</emphasis>
973 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classMFRC522_1aaa96aa7ec4f95e0835cb758ad0450d74">PCD_TransceiveData</link>(buffer,&#32;4,&#32;buffer,&#32;bufferSize,&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;0,&#32;<emphasis role="keyword">true</emphasis>);
974 }&#32;<emphasis role="comment">//&#32;End&#32;MIFARE_Read()</emphasis>
975 
987 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1a0dc5fb05769779ec3ed708bd153706b3">MFRC522::MIFARE_Write</link>(&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;blockAddr,&#32;
988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*buffer,&#32;&#32;&#32;
989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;bufferSize&#32;
990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
991 &#32;&#32;&#32;&#32;MFRC522::StatusCode&#32;result;
992 &#32;&#32;&#32;&#32;
993 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sanity&#32;check</emphasis>
994 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>&#32;||&#32;bufferSize&#32;&lt;&#32;16)&#32;{
995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_INVALID;
996 &#32;&#32;&#32;&#32;}
997 &#32;&#32;&#32;&#32;
998 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Mifare&#32;Classic&#32;protocol&#32;requires&#32;two&#32;communications&#32;to&#32;perform&#32;a&#32;write.</emphasis>
999 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Step&#32;1:&#32;Tell&#32;the&#32;PICC&#32;we&#32;want&#32;to&#32;write&#32;to&#32;block&#32;blockAddr.</emphasis>
1000 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;cmdBuffer[2];
1001 &#32;&#32;&#32;&#32;cmdBuffer[0]&#32;=&#32;PICC_CMD_MF_WRITE;
1002 &#32;&#32;&#32;&#32;cmdBuffer[1]&#32;=&#32;blockAddr;
1003 &#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_classMFRC522_1aa88d28676b3ffb5985af8db35d39077b">PCD_MIFARE_Transceive</link>(cmdBuffer,&#32;2);&#32;<emphasis role="comment">//&#32;Adds&#32;CRC_A&#32;and&#32;checks&#32;that&#32;the&#32;response&#32;is&#32;MF_ACK.</emphasis>
1004 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;STATUS_OK)&#32;{
1005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
1006 &#32;&#32;&#32;&#32;}
1007 &#32;&#32;&#32;&#32;
1008 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Step&#32;2:&#32;Transfer&#32;the&#32;data</emphasis>
1009 &#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_classMFRC522_1aa88d28676b3ffb5985af8db35d39077b">PCD_MIFARE_Transceive</link>(buffer,&#32;bufferSize);&#32;<emphasis role="comment">//&#32;Adds&#32;CRC_A&#32;and&#32;checks&#32;that&#32;the&#32;response&#32;is&#32;MF_ACK.</emphasis>
1010 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;STATUS_OK)&#32;{
1011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
1012 &#32;&#32;&#32;&#32;}
1013 &#32;&#32;&#32;&#32;
1014 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_OK;
1015 }&#32;<emphasis role="comment">//&#32;End&#32;MIFARE_Write()</emphasis>
1016 
1022 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1a7053e61540b68e6aa5c6cbea308836c4">MFRC522::MIFARE_Ultralight_Write</link>(&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;page,&#32;&#32;&#32;&#32;&#32;&#32;
1023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*buffer,&#32;&#32;&#32;
1024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;bufferSize&#32;
1025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
1026 &#32;&#32;&#32;&#32;MFRC522::StatusCode&#32;result;
1027 &#32;&#32;&#32;&#32;
1028 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sanity&#32;check</emphasis>
1029 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>&#32;||&#32;bufferSize&#32;&lt;&#32;4)&#32;{
1030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_INVALID;
1031 &#32;&#32;&#32;&#32;}
1032 &#32;&#32;&#32;&#32;
1033 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Build&#32;commmand&#32;buffer</emphasis>
1034 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;cmdBuffer[6];
1035 &#32;&#32;&#32;&#32;cmdBuffer[0]&#32;=&#32;PICC_CMD_UL_WRITE;
1036 &#32;&#32;&#32;&#32;cmdBuffer[1]&#32;=&#32;page;
1037 &#32;&#32;&#32;&#32;memcpy(&amp;cmdBuffer[2],&#32;buffer,&#32;4);
1038 &#32;&#32;&#32;&#32;
1039 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Perform&#32;the&#32;write</emphasis>
1040 &#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_classMFRC522_1aa88d28676b3ffb5985af8db35d39077b">PCD_MIFARE_Transceive</link>(cmdBuffer,&#32;6);&#32;<emphasis role="comment">//&#32;Adds&#32;CRC_A&#32;and&#32;checks&#32;that&#32;the&#32;response&#32;is&#32;MF_ACK.</emphasis>
1041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;STATUS_OK)&#32;{
1042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
1043 &#32;&#32;&#32;&#32;}
1044 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_OK;
1045 }&#32;<emphasis role="comment">//&#32;End&#32;MIFARE_Ultralight_Write()</emphasis>
1046 
1055 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1aeab21496c761cdecb29c69f9f3fa6150">MFRC522::MIFARE_Decrement</link>(&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;blockAddr,&#32;
1056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int32_t&#32;delta&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
1058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classMFRC522_1a86cb4ad38f61b823dfe97103b1b1f9d6">MIFARE_TwoStepHelper</link>(PICC_CMD_MF_DECREMENT,&#32;blockAddr,&#32;delta);
1059 }&#32;<emphasis role="comment">//&#32;End&#32;MIFARE_Decrement()</emphasis>
1060 
1069 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1af9566664f23d4d67efd270e42c3dc723">MFRC522::MIFARE_Increment</link>(&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;blockAddr,&#32;
1070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int32_t&#32;delta&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
1072 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classMFRC522_1a86cb4ad38f61b823dfe97103b1b1f9d6">MIFARE_TwoStepHelper</link>(PICC_CMD_MF_INCREMENT,&#32;blockAddr,&#32;delta);
1073 }&#32;<emphasis role="comment">//&#32;End&#32;MIFARE_Increment()</emphasis>
1074 
1083 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1a946ba7e7e244f40adcb9f900d8fd3a48">MFRC522::MIFARE_Restore</link>(&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;blockAddr&#32;
1084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
1085 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;datasheet&#32;describes&#32;Restore&#32;as&#32;a&#32;two&#32;step&#32;operation,&#32;but&#32;does&#32;not&#32;explain&#32;what&#32;data&#32;to&#32;transfer&#32;in&#32;step&#32;2.</emphasis>
1086 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Doing&#32;only&#32;a&#32;single&#32;step&#32;does&#32;not&#32;work,&#32;so&#32;I&#32;chose&#32;to&#32;transfer&#32;0L&#32;in&#32;step&#32;two.</emphasis>
1087 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classMFRC522_1a86cb4ad38f61b823dfe97103b1b1f9d6">MIFARE_TwoStepHelper</link>(PICC_CMD_MF_RESTORE,&#32;blockAddr,&#32;0L);
1088 }&#32;<emphasis role="comment">//&#32;End&#32;MIFARE_Restore()</emphasis>
1089 
1095 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1a86cb4ad38f61b823dfe97103b1b1f9d6">MFRC522::MIFARE_TwoStepHelper</link>(&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;command,&#32;&#32;&#32;
1096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;blockAddr,&#32;
1097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int32_t&#32;data&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
1099 &#32;&#32;&#32;&#32;MFRC522::StatusCode&#32;result;
1100 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;cmdBuffer[2];&#32;<emphasis role="comment">//&#32;We&#32;only&#32;need&#32;room&#32;for&#32;2&#32;bytes.</emphasis>
1101 &#32;&#32;&#32;&#32;
1102 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Step&#32;1:&#32;Tell&#32;the&#32;PICC&#32;the&#32;command&#32;and&#32;block&#32;address</emphasis>
1103 &#32;&#32;&#32;&#32;cmdBuffer[0]&#32;=&#32;command;
1104 &#32;&#32;&#32;&#32;cmdBuffer[1]&#32;=&#32;blockAddr;
1105 &#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_classMFRC522_1aa88d28676b3ffb5985af8db35d39077b">PCD_MIFARE_Transceive</link>(&#32;cmdBuffer,&#32;2);&#32;<emphasis role="comment">//&#32;Adds&#32;CRC_A&#32;and&#32;checks&#32;that&#32;the&#32;response&#32;is&#32;MF_ACK.</emphasis>
1106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;STATUS_OK)&#32;{
1107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
1108 &#32;&#32;&#32;&#32;}
1109 &#32;&#32;&#32;&#32;
1110 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Step&#32;2:&#32;Transfer&#32;the&#32;data</emphasis>
1111 &#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_classMFRC522_1aa88d28676b3ffb5985af8db35d39077b">PCD_MIFARE_Transceive</link>(&#32;(<emphasis role="keywordtype">byte</emphasis>&#32;*)&amp;data,&#32;4,&#32;<emphasis role="keyword">true</emphasis>);&#32;<emphasis role="comment">//&#32;Adds&#32;CRC_A&#32;and&#32;accept&#32;timeout&#32;as&#32;success.</emphasis>
1112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;STATUS_OK)&#32;{
1113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
1114 &#32;&#32;&#32;&#32;}
1115 &#32;&#32;&#32;&#32;
1116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_OK;
1117 }&#32;<emphasis role="comment">//&#32;End&#32;MIFARE_TwoStepHelper()</emphasis>
1118 
1126 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1a16ee66df69fda8a3065bc9218b45de0b">MFRC522::MIFARE_Transfer</link>(&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;blockAddr&#32;
1127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
1128 &#32;&#32;&#32;&#32;MFRC522::StatusCode&#32;result;
1129 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;cmdBuffer[2];&#32;<emphasis role="comment">//&#32;We&#32;only&#32;need&#32;room&#32;for&#32;2&#32;bytes.</emphasis>
1130 &#32;&#32;&#32;&#32;
1131 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Tell&#32;the&#32;PICC&#32;we&#32;want&#32;to&#32;transfer&#32;the&#32;result&#32;into&#32;block&#32;blockAddr.</emphasis>
1132 &#32;&#32;&#32;&#32;cmdBuffer[0]&#32;=&#32;PICC_CMD_MF_TRANSFER;
1133 &#32;&#32;&#32;&#32;cmdBuffer[1]&#32;=&#32;blockAddr;
1134 &#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_classMFRC522_1aa88d28676b3ffb5985af8db35d39077b">PCD_MIFARE_Transceive</link>(&#32;cmdBuffer,&#32;2);&#32;<emphasis role="comment">//&#32;Adds&#32;CRC_A&#32;and&#32;checks&#32;that&#32;the&#32;response&#32;is&#32;MF_ACK.</emphasis>
1135 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;STATUS_OK)&#32;{
1136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
1137 &#32;&#32;&#32;&#32;}
1138 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_OK;
1139 }&#32;<emphasis role="comment">//&#32;End&#32;MIFARE_Transfer()</emphasis>
1140 
1152 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1ab4009cbdd5150b1b3a62084aa2033807">MFRC522::MIFARE_GetValue</link>(<emphasis role="keywordtype">byte</emphasis>&#32;blockAddr,&#32;int32_t&#32;*value)&#32;{
1153 &#32;&#32;&#32;&#32;MFRC522::StatusCode&#32;status;
1154 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;buffer[18];
1155 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(buffer);
1156 &#32;&#32;&#32;&#32;
1157 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;the&#32;block</emphasis>
1158 &#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="_classMFRC522_1a6ed93e88913ea104420f3bb4a88cce52">MIFARE_Read</link>(blockAddr,&#32;buffer,&#32;&amp;size);
1159 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;==&#32;STATUS_OK)&#32;{
1160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Extract&#32;the&#32;value</emphasis>
1161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*value&#32;=&#32;(int32_t(buffer[3])&lt;&lt;24)&#32;|&#32;(int32_t(buffer[2])&lt;&lt;16)&#32;|&#32;(int32_t(buffer[1])&lt;&lt;8)&#32;|&#32;int32_t(buffer[0]);
1162 &#32;&#32;&#32;&#32;}
1163 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
1164 }&#32;<emphasis role="comment">//&#32;End&#32;MIFARE_GetValue()</emphasis>
1165 
1177 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1af19fc75e9415322fbe89245ed70a784b">MFRC522::MIFARE_SetValue</link>(<emphasis role="keywordtype">byte</emphasis>&#32;blockAddr,&#32;int32_t&#32;value)&#32;{
1178 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;buffer[18];
1179 &#32;&#32;&#32;&#32;
1180 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Translate&#32;the&#32;int32_t&#32;into&#32;4&#32;bytes;&#32;repeated&#32;2x&#32;in&#32;value&#32;block</emphasis>
1181 &#32;&#32;&#32;&#32;buffer[0]&#32;=&#32;buffer[&#32;8]&#32;=&#32;(value&#32;&amp;&#32;0xFF);
1182 &#32;&#32;&#32;&#32;buffer[1]&#32;=&#32;buffer[&#32;9]&#32;=&#32;(value&#32;&amp;&#32;0xFF00)&#32;&gt;&gt;&#32;8;
1183 &#32;&#32;&#32;&#32;buffer[2]&#32;=&#32;buffer[10]&#32;=&#32;(value&#32;&amp;&#32;0xFF0000)&#32;&gt;&gt;&#32;16;
1184 &#32;&#32;&#32;&#32;buffer[3]&#32;=&#32;buffer[11]&#32;=&#32;(value&#32;&amp;&#32;0xFF000000)&#32;&gt;&gt;&#32;24;
1185 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Inverse&#32;4&#32;bytes&#32;also&#32;found&#32;in&#32;value&#32;block</emphasis>
1186 &#32;&#32;&#32;&#32;buffer[4]&#32;=&#32;~buffer[0];
1187 &#32;&#32;&#32;&#32;buffer[5]&#32;=&#32;~buffer[1];
1188 &#32;&#32;&#32;&#32;buffer[6]&#32;=&#32;~buffer[2];
1189 &#32;&#32;&#32;&#32;buffer[7]&#32;=&#32;~buffer[3];
1190 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Address&#32;2x&#32;with&#32;inverse&#32;address&#32;2x</emphasis>
1191 &#32;&#32;&#32;&#32;buffer[12]&#32;=&#32;buffer[14]&#32;=&#32;blockAddr;
1192 &#32;&#32;&#32;&#32;buffer[13]&#32;=&#32;buffer[15]&#32;=&#32;~blockAddr;
1193 &#32;&#32;&#32;&#32;
1194 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Write&#32;the&#32;whole&#32;data&#32;block</emphasis>
1195 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classMFRC522_1a0dc5fb05769779ec3ed708bd153706b3">MIFARE_Write</link>(blockAddr,&#32;buffer,&#32;16);
1196 }&#32;<emphasis role="comment">//&#32;End&#32;MIFARE_SetValue()</emphasis>
1197 
1207 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1acb47eb7a05ae58825b4085efeb7a09bb">MFRC522::PCD_NTAG216_AUTH</link>(<emphasis role="keywordtype">byte</emphasis>*&#32;passWord,&#32;<emphasis role="keywordtype">byte</emphasis>&#32;pACK[])&#32;<emphasis role="comment">//Authenticate&#32;with&#32;32bit&#32;password</emphasis>
1208 {
1209 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Fix&#32;cmdBuffer&#32;length&#32;and&#32;rxlength.&#32;They&#32;really&#32;should&#32;match.</emphasis>
1210 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;(Better&#32;still,&#32;rxlength&#32;should&#32;not&#32;even&#32;be&#32;necessary.)</emphasis>
1211 
1212 &#32;&#32;&#32;&#32;MFRC522::StatusCode&#32;result;
1213 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cmdBuffer[18];&#32;<emphasis role="comment">//&#32;We&#32;need&#32;room&#32;for&#32;16&#32;bytes&#32;data&#32;and&#32;2&#32;bytes&#32;CRC_A.</emphasis>
1214 &#32;&#32;&#32;&#32;
1215 &#32;&#32;&#32;&#32;cmdBuffer[0]&#32;=&#32;0x1B;&#32;<emphasis role="comment">//Comando&#32;de&#32;autentificacion</emphasis>
1216 &#32;&#32;&#32;&#32;
1217 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">byte</emphasis>&#32;i&#32;=&#32;0;&#32;i&lt;4;&#32;i++)
1218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cmdBuffer[i+1]&#32;=&#32;passWord[i];
1219 &#32;&#32;&#32;&#32;
1220 &#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_classMFRC522_1a7c65647b1d72b6ee7557797322030643">PCD_CalculateCRC</link>(cmdBuffer,&#32;5,&#32;&amp;cmdBuffer[5]);
1221 &#32;&#32;&#32;&#32;
1222 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result!=STATUS_OK)&#32;{
1223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
1224 &#32;&#32;&#32;&#32;}
1225 &#32;&#32;&#32;&#32;
1226 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Transceive&#32;the&#32;data,&#32;store&#32;the&#32;reply&#32;in&#32;cmdBuffer[]</emphasis>
1227 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;waitIRq&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0x30;&#32;<emphasis role="comment">//&#32;RxIRq&#32;and&#32;IdleIRq</emphasis>
1228 <emphasis role="comment">//&#32;&#32;byte&#32;cmdBufferSize&#32;&#32;=&#32;sizeof(cmdBuffer);</emphasis>
1229 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;validBits&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
1230 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;rxlength&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;5;
1231 &#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_classMFRC522_1acb2b1e74bc49fda2704450a684faa845">PCD_CommunicateWithPICC</link>(PCD_Transceive,&#32;waitIRq,&#32;cmdBuffer,&#32;7,&#32;cmdBuffer,&#32;&amp;rxlength,&#32;&amp;validBits);
1232 &#32;&#32;&#32;&#32;
1233 &#32;&#32;&#32;&#32;pACK[0]&#32;=&#32;cmdBuffer[0];
1234 &#32;&#32;&#32;&#32;pACK[1]&#32;=&#32;cmdBuffer[1];
1235 &#32;&#32;&#32;&#32;
1236 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result!=STATUS_OK)&#32;{
1237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
1238 &#32;&#32;&#32;&#32;}
1239 &#32;&#32;&#32;&#32;
1240 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_OK;
1241 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_NTAG216_AUTH()</emphasis>
1242 
1243 
1245 <emphasis role="comment">//&#32;Support&#32;functions</emphasis>
1247 
1254 MFRC522::StatusCode&#32;<link linkend="_classMFRC522_1aa88d28676b3ffb5985af8db35d39077b">MFRC522::PCD_MIFARE_Transceive</link>(&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*sendData,&#32;&#32;&#32;&#32;&#32;
1255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;sendLen,&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;acceptTimeout&#32;&#32;
1257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
1258 &#32;&#32;&#32;&#32;MFRC522::StatusCode&#32;result;
1259 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;cmdBuffer[18];&#32;<emphasis role="comment">//&#32;We&#32;need&#32;room&#32;for&#32;16&#32;bytes&#32;data&#32;and&#32;2&#32;bytes&#32;CRC_A.</emphasis>
1260 &#32;&#32;&#32;&#32;
1261 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sanity&#32;check</emphasis>
1262 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sendData&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>&#32;||&#32;sendLen&#32;&gt;&#32;16)&#32;{
1263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_INVALID;
1264 &#32;&#32;&#32;&#32;}
1265 &#32;&#32;&#32;&#32;
1266 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;sendData[]&#32;to&#32;cmdBuffer[]&#32;and&#32;add&#32;CRC_A</emphasis>
1267 &#32;&#32;&#32;&#32;memcpy(cmdBuffer,&#32;sendData,&#32;sendLen);
1268 &#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_classMFRC522_1a7c65647b1d72b6ee7557797322030643">PCD_CalculateCRC</link>(cmdBuffer,&#32;sendLen,&#32;&amp;cmdBuffer[sendLen]);
1269 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;STATUS_OK)&#32;{&#32;
1270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
1271 &#32;&#32;&#32;&#32;}
1272 &#32;&#32;&#32;&#32;sendLen&#32;+=&#32;2;
1273 &#32;&#32;&#32;&#32;
1274 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Transceive&#32;the&#32;data,&#32;store&#32;the&#32;reply&#32;in&#32;cmdBuffer[]</emphasis>
1275 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;waitIRq&#32;=&#32;0x30;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;RxIRq&#32;and&#32;IdleIRq</emphasis>
1276 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;cmdBufferSize&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(cmdBuffer);
1277 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;validBits&#32;=&#32;0;
1278 &#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_classMFRC522_1acb2b1e74bc49fda2704450a684faa845">PCD_CommunicateWithPICC</link>(PCD_Transceive,&#32;waitIRq,&#32;cmdBuffer,&#32;sendLen,&#32;cmdBuffer,&#32;&amp;cmdBufferSize,&#32;&amp;validBits);
1279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(acceptTimeout&#32;&amp;&amp;&#32;result&#32;==&#32;STATUS_TIMEOUT)&#32;{
1280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_OK;
1281 &#32;&#32;&#32;&#32;}
1282 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;STATUS_OK)&#32;{
1283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
1284 &#32;&#32;&#32;&#32;}
1285 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;PICC&#32;must&#32;reply&#32;with&#32;a&#32;4&#32;bit&#32;ACK</emphasis>
1286 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cmdBufferSize&#32;!=&#32;1&#32;||&#32;validBits&#32;!=&#32;4)&#32;{
1287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_ERROR;
1288 &#32;&#32;&#32;&#32;}
1289 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cmdBuffer[0]&#32;!=&#32;MF_ACK)&#32;{
1290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_MIFARE_NACK;
1291 &#32;&#32;&#32;&#32;}
1292 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STATUS_OK;
1293 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_MIFARE_Transceive()</emphasis>
1294 
1300 <emphasis role="keyword">const</emphasis>&#32;__FlashStringHelper&#32;*<link linkend="_classMFRC522_1a32f88620ab97f7fef3693280c58cb4bb">MFRC522::GetStatusCodeName</link>(MFRC522::StatusCode&#32;code&#32;&#32;
1301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
1302 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(code)&#32;{
1303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STATUS_OK:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;Success.&quot;</emphasis>);
1304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STATUS_ERROR:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;Error&#32;in&#32;communication.&quot;</emphasis>);
1305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STATUS_COLLISION:&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;Collision&#32;detected.&quot;</emphasis>);
1306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STATUS_TIMEOUT:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;Timeout&#32;in&#32;communication.&quot;</emphasis>);
1307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STATUS_NO_ROOM:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;A&#32;buffer&#32;is&#32;not&#32;big&#32;enough.&quot;</emphasis>);
1308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STATUS_INTERNAL_ERROR:&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;Internal&#32;error&#32;in&#32;the&#32;code.&#32;Should&#32;not&#32;happen.&quot;</emphasis>);
1309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STATUS_INVALID:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;Invalid&#32;argument.&quot;</emphasis>);
1310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STATUS_CRC_WRONG:&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;The&#32;CRC_A&#32;does&#32;not&#32;match.&quot;</emphasis>);
1311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STATUS_MIFARE_NACK:&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;A&#32;MIFARE&#32;PICC&#32;responded&#32;with&#32;NAK.&quot;</emphasis>);
1312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;Unknown&#32;error&quot;</emphasis>);
1313 &#32;&#32;&#32;&#32;}
1314 }&#32;<emphasis role="comment">//&#32;End&#32;GetStatusCodeName()</emphasis>
1315 
1321 MFRC522::PICC_Type&#32;<link linkend="_classMFRC522_1ac80a18228260bdde07dff5d4ac23bb53">MFRC522::PICC_GetType</link>(<emphasis role="keywordtype">byte</emphasis>&#32;sak&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
1323 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;http://www.nxp.com/documents/application_note/AN10833.pdf&#32;</emphasis>
1324 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3.2&#32;Coding&#32;of&#32;Select&#32;Acknowledge&#32;(SAK)</emphasis>
1325 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ignore&#32;8-bit&#32;(iso14443&#32;starts&#32;with&#32;LSBit&#32;=&#32;bit&#32;1)</emphasis>
1326 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fixes&#32;wrong&#32;type&#32;for&#32;manufacturer&#32;Infineon&#32;(http://nfc-tools.org/index.php?title=ISO14443A)</emphasis>
1327 &#32;&#32;&#32;&#32;sak&#32;&amp;=&#32;0x7F;
1328 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(sak)&#32;{
1329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x04:&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PICC_TYPE_NOT_COMPLETE;&#32;&#32;<emphasis role="comment">//&#32;UID&#32;not&#32;complete</emphasis>
1330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x09:&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PICC_TYPE_MIFARE_MINI;
1331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x08:&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PICC_TYPE_MIFARE_1K;
1332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x18:&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PICC_TYPE_MIFARE_4K;
1333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x00:&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PICC_TYPE_MIFARE_UL;
1334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x10:
1335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x11:&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PICC_TYPE_MIFARE_PLUS;
1336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x01:&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PICC_TYPE_TNP3XXX;
1337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x20:&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PICC_TYPE_ISO_14443_4;
1338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x40:&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PICC_TYPE_ISO_18092;
1339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PICC_TYPE_UNKNOWN;
1340 &#32;&#32;&#32;&#32;}
1341 }&#32;<emphasis role="comment">//&#32;End&#32;PICC_GetType()</emphasis>
1342 
1348 <emphasis role="keyword">const</emphasis>&#32;__FlashStringHelper&#32;*<link linkend="_classMFRC522_1aae4a482352d4d4b7d7a9714b0b0b7c38">MFRC522::PICC_GetTypeName</link>(PICC_Type&#32;piccType&#32;
1349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
1350 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(piccType)&#32;{
1351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_ISO_14443_4:&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;PICC&#32;compliant&#32;with&#32;ISO/IEC&#32;14443-4&quot;</emphasis>);
1352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_ISO_18092:&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;PICC&#32;compliant&#32;with&#32;ISO/IEC&#32;18092&#32;(NFC)&quot;</emphasis>);
1353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_MIFARE_MINI:&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;MIFARE&#32;Mini,&#32;320&#32;bytes&quot;</emphasis>);
1354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_MIFARE_1K:&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;MIFARE&#32;1KB&quot;</emphasis>);
1355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_MIFARE_4K:&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;MIFARE&#32;4KB&quot;</emphasis>);
1356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_MIFARE_UL:&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;MIFARE&#32;Ultralight&#32;or&#32;Ultralight&#32;C&quot;</emphasis>);
1357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_MIFARE_PLUS:&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;MIFARE&#32;Plus&quot;</emphasis>);
1358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_MIFARE_DESFIRE:&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;MIFARE&#32;DESFire&quot;</emphasis>);
1359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_TNP3XXX:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;MIFARE&#32;TNP3XXX&quot;</emphasis>);
1360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_NOT_COMPLETE:&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;SAK&#32;indicates&#32;UID&#32;is&#32;not&#32;complete.&quot;</emphasis>);
1361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_UNKNOWN:
1362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;F(<emphasis role="stringliteral">&quot;Unknown&#32;type&quot;</emphasis>);
1363 &#32;&#32;&#32;&#32;}
1364 }&#32;<emphasis role="comment">//&#32;End&#32;PICC_GetTypeName()</emphasis>
1365 
1370 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1a41c31c6932a59646eeff470c60a4d20d">MFRC522::PCD_DumpVersionToSerial</link>()&#32;{
1371 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;the&#32;MFRC522&#32;firmware&#32;version</emphasis>
1372 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;v&#32;=&#32;<link linkend="_classMFRC522_1a4289838c6f24f2d62eb8dc0e7a6647d1">PCD_ReadRegister</link>(VersionReg);
1373 &#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;Firmware&#32;Version:&#32;0x&quot;</emphasis>));
1374 &#32;&#32;&#32;&#32;Serial.print(v,&#32;HEX);
1375 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Lookup&#32;which&#32;version</emphasis>
1376 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(v)&#32;{
1377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x88:&#32;Serial.println(F(<emphasis role="stringliteral">&quot;&#32;=&#32;(clone)&quot;</emphasis>));&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x90:&#32;Serial.println(F(<emphasis role="stringliteral">&quot;&#32;=&#32;v0.0&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x91:&#32;Serial.println(F(<emphasis role="stringliteral">&quot;&#32;=&#32;v1.0&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x92:&#32;Serial.println(F(<emphasis role="stringliteral">&quot;&#32;=&#32;v2.0&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x12:&#32;Serial.println(F(<emphasis role="stringliteral">&quot;&#32;=&#32;counterfeit&#32;chip&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;Serial.println(F(<emphasis role="stringliteral">&quot;&#32;=&#32;(unknown)&quot;</emphasis>));
1383 &#32;&#32;&#32;&#32;}
1384 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;0x00&#32;or&#32;0xFF&#32;is&#32;returned,&#32;communication&#32;probably&#32;failed</emphasis>
1385 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((v&#32;==&#32;0x00)&#32;||&#32;(v&#32;==&#32;0xFF))
1386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(F(<emphasis role="stringliteral">&quot;WARNING:&#32;Communication&#32;failure,&#32;is&#32;the&#32;MFRC522&#32;properly&#32;connected?&quot;</emphasis>));
1387 }&#32;<emphasis role="comment">//&#32;End&#32;PCD_DumpVersionToSerial()</emphasis>
1388 
1394 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1a6f324d43c6fbbd0e260b171747186037">MFRC522::PICC_DumpToSerial</link>(<link linkend="_classMFRC522_1structMFRC522_1_1Uid">Uid</link>&#32;*uid&#32;&#32;&#32;&#32;
1395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
1396 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1structMFRC522_1_1MIFARE__Key">MIFARE_Key</link>&#32;key;
1397 &#32;&#32;&#32;&#32;
1398 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Dump&#32;UID,&#32;SAK&#32;and&#32;Type</emphasis>
1399 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1a3b9a2c6da6505e0ff7b58c37d7aeff37">PICC_DumpDetailsToSerial</link>(uid);
1400 &#32;&#32;&#32;&#32;
1401 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Dump&#32;contents</emphasis>
1402 &#32;&#32;&#32;&#32;PICC_Type&#32;piccType&#32;=&#32;<link linkend="_classMFRC522_1ac80a18228260bdde07dff5d4ac23bb53">PICC_GetType</link>(uid-&gt;sak);
1403 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(piccType)&#32;{
1404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_MIFARE_MINI:
1405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_MIFARE_1K:
1406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_MIFARE_4K:
1407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;All&#32;keys&#32;are&#32;set&#32;to&#32;FFFFFFFFFFFFh&#32;at&#32;chip&#32;delivery&#32;from&#32;the&#32;factory.</emphasis>
1408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">byte</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;6;&#32;i++)&#32;{
1409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key.keyByte[i]&#32;=&#32;0xFF;
1410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aafba2e74124efa2d736c1672ea104190">PICC_DumpMifareClassicToSerial</link>(uid,&#32;piccType,&#32;&amp;key);
1412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_MIFARE_UL:
1415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1ac148d28877dd577606a28e9e7e4b6809">PICC_DumpMifareUltralightToSerial</link>();
1416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_ISO_14443_4:
1419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_MIFARE_DESFIRE:
1420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_ISO_18092:
1421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_MIFARE_PLUS:
1422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_TNP3XXX:
1423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(F(<emphasis role="stringliteral">&quot;Dumping&#32;memory&#32;contents&#32;not&#32;implemented&#32;for&#32;that&#32;PICC&#32;type.&quot;</emphasis>));
1424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_UNKNOWN:
1427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_NOT_COMPLETE:
1428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
1429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;&#32;<emphasis role="comment">//&#32;No&#32;memory&#32;dump&#32;here</emphasis>
1430 &#32;&#32;&#32;&#32;}
1431 &#32;&#32;&#32;&#32;
1432 &#32;&#32;&#32;&#32;Serial.println();
1433 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1a8874921b4ed26c5b73d89c90f76d4933">PICC_HaltA</link>();&#32;<emphasis role="comment">//&#32;Already&#32;done&#32;if&#32;it&#32;was&#32;a&#32;MIFARE&#32;Classic&#32;PICC.</emphasis>
1434 }&#32;<emphasis role="comment">//&#32;End&#32;PICC_DumpToSerial()</emphasis>
1435 
1439 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1a3b9a2c6da6505e0ff7b58c37d7aeff37">MFRC522::PICC_DumpDetailsToSerial</link>(<link linkend="_classMFRC522_1structMFRC522_1_1Uid">Uid</link>&#32;*uid&#32;
1440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
1441 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;UID</emphasis>
1442 &#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;Card&#32;UID:&quot;</emphasis>));
1443 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">byte</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;uid-&gt;size;&#32;i++)&#32;{
1444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(uid-&gt;uidByte[i]&#32;&lt;&#32;0x10)
1445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;0&quot;</emphasis>));
1446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>));
1448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(uid-&gt;uidByte[i],&#32;HEX);
1449 &#32;&#32;&#32;&#32;}&#32;
1450 &#32;&#32;&#32;&#32;Serial.println();
1451 &#32;&#32;&#32;&#32;
1452 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SAK</emphasis>
1453 &#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;Card&#32;SAK:&#32;&quot;</emphasis>));
1454 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(uid-&gt;sak&#32;&lt;&#32;0x10)
1455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;0&quot;</emphasis>));
1456 &#32;&#32;&#32;&#32;Serial.println(uid-&gt;sak,&#32;HEX);
1457 &#32;&#32;&#32;&#32;
1458 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(suggested)&#32;PICC&#32;type</emphasis>
1459 &#32;&#32;&#32;&#32;PICC_Type&#32;piccType&#32;=&#32;<link linkend="_classMFRC522_1ac80a18228260bdde07dff5d4ac23bb53">PICC_GetType</link>(uid-&gt;sak);
1460 &#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;PICC&#32;type:&#32;&quot;</emphasis>));
1461 &#32;&#32;&#32;&#32;Serial.println(<link linkend="_classMFRC522_1aae4a482352d4d4b7d7a9714b0b0b7c38">PICC_GetTypeName</link>(piccType));
1462 }&#32;<emphasis role="comment">//&#32;End&#32;PICC_DumpDetailsToSerial()</emphasis>
1463 
1468 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1aafba2e74124efa2d736c1672ea104190">MFRC522::PICC_DumpMifareClassicToSerial</link>(&#32;&#32;&#32;<link linkend="_classMFRC522_1structMFRC522_1_1Uid">Uid</link>&#32;*uid,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PICC_Type&#32;piccType,&#32;
1470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1structMFRC522_1_1MIFARE__Key">MIFARE_Key</link>&#32;*key&#32;&#32;&#32;&#32;&#32;
1471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
1472 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;no_of_sectors&#32;=&#32;0;
1473 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(piccType)&#32;{
1474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_MIFARE_MINI:
1475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Has&#32;5&#32;sectors&#32;*&#32;4&#32;blocks/sector&#32;*&#32;16&#32;bytes/block&#32;=&#32;320&#32;bytes.</emphasis>
1476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;no_of_sectors&#32;=&#32;5;
1477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_MIFARE_1K:
1480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Has&#32;16&#32;sectors&#32;*&#32;4&#32;blocks/sector&#32;*&#32;16&#32;bytes/block&#32;=&#32;1024&#32;bytes.</emphasis>
1481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;no_of_sectors&#32;=&#32;16;
1482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PICC_TYPE_MIFARE_4K:
1485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Has&#32;(32&#32;sectors&#32;*&#32;4&#32;blocks/sector&#32;+&#32;8&#32;sectors&#32;*&#32;16&#32;blocks/sector)&#32;*&#32;16&#32;bytes/block&#32;=&#32;4096&#32;bytes.</emphasis>
1486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;no_of_sectors&#32;=&#32;40;
1487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="comment">//&#32;Should&#32;not&#32;happen.&#32;Ignore.</emphasis>
1490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1491 &#32;&#32;&#32;&#32;}
1492 &#32;&#32;&#32;&#32;
1493 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Dump&#32;sectors,&#32;highest&#32;address&#32;first.</emphasis>
1494 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(no_of_sectors)&#32;{
1495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(F(<emphasis role="stringliteral">&quot;Sector&#32;Block&#32;&#32;&#32;0&#32;&#32;1&#32;&#32;2&#32;&#32;3&#32;&#32;&#32;4&#32;&#32;5&#32;&#32;6&#32;&#32;7&#32;&#32;&#32;8&#32;&#32;9&#32;10&#32;11&#32;&#32;12&#32;13&#32;14&#32;15&#32;&#32;AccessBits&quot;</emphasis>));
1496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(int8_t&#32;i&#32;=&#32;no_of_sectors&#32;-&#32;1;&#32;i&#32;&gt;=&#32;0;&#32;i--)&#32;{
1497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1a20c559f09927a7c5f91295f6158e4342">PICC_DumpMifareClassicSectorToSerial</link>(uid,&#32;key,&#32;i);
1498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1499 &#32;&#32;&#32;&#32;}
1500 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1a8874921b4ed26c5b73d89c90f76d4933">PICC_HaltA</link>();&#32;<emphasis role="comment">//&#32;Halt&#32;the&#32;PICC&#32;before&#32;stopping&#32;the&#32;encrypted&#32;session.</emphasis>
1501 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1a24d3ab7b2170fdfa3f0121a7256f12d9">PCD_StopCrypto1</link>();
1502 }&#32;<emphasis role="comment">//&#32;End&#32;PICC_DumpMifareClassicToSerial()</emphasis>
1503 
1509 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1a20c559f09927a7c5f91295f6158e4342">MFRC522::PICC_DumpMifareClassicSectorToSerial</link>(<link linkend="_classMFRC522_1structMFRC522_1_1Uid">Uid</link>&#32;*uid,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1structMFRC522_1_1MIFARE__Key">MIFARE_Key</link>&#32;*key,&#32;&#32;&#32;&#32;
1511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;sector&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
1513 &#32;&#32;&#32;&#32;MFRC522::StatusCode&#32;status;
1514 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;firstBlock;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Address&#32;of&#32;lowest&#32;address&#32;to&#32;dump&#32;actually&#32;last&#32;block&#32;dumped)</emphasis>
1515 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;no_of_blocks;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;blocks&#32;in&#32;sector</emphasis>
1516 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSectorTrailer;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;to&#32;true&#32;while&#32;handling&#32;the&#32;&quot;last&quot;&#32;(ie&#32;highest&#32;address)&#32;in&#32;the&#32;sector.</emphasis>
1517 &#32;&#32;&#32;&#32;
1518 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;access&#32;bits&#32;are&#32;stored&#32;in&#32;a&#32;peculiar&#32;fashion.</emphasis>
1519 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;There&#32;are&#32;four&#32;groups:</emphasis>
1520 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;g[3]&#32;&#32;&#32;&#32;Access&#32;bits&#32;for&#32;the&#32;sector&#32;trailer,&#32;block&#32;3&#32;(for&#32;sectors&#32;0-31)&#32;or&#32;block&#32;15&#32;(for&#32;sectors&#32;32-39)</emphasis>
1521 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;g[2]&#32;&#32;&#32;&#32;Access&#32;bits&#32;for&#32;block&#32;2&#32;(for&#32;sectors&#32;0-31)&#32;or&#32;blocks&#32;10-14&#32;(for&#32;sectors&#32;32-39)</emphasis>
1522 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;g[1]&#32;&#32;&#32;&#32;Access&#32;bits&#32;for&#32;block&#32;1&#32;(for&#32;sectors&#32;0-31)&#32;or&#32;blocks&#32;5-9&#32;(for&#32;sectors&#32;32-39)</emphasis>
1523 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;g[0]&#32;&#32;&#32;&#32;Access&#32;bits&#32;for&#32;block&#32;0&#32;(for&#32;sectors&#32;0-31)&#32;or&#32;blocks&#32;0-4&#32;(for&#32;sectors&#32;32-39)</emphasis>
1524 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Each&#32;group&#32;has&#32;access&#32;bits&#32;[C1&#32;C2&#32;C3].&#32;In&#32;this&#32;code&#32;C1&#32;is&#32;MSB&#32;and&#32;C3&#32;is&#32;LSB.</emphasis>
1525 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;four&#32;CX&#32;bits&#32;are&#32;stored&#32;together&#32;in&#32;a&#32;nible&#32;cx&#32;and&#32;an&#32;inverted&#32;nible&#32;cx_.</emphasis>
1526 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;c1,&#32;c2,&#32;c3;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Nibbles</emphasis>
1527 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;c1_,&#32;c2_,&#32;c3_;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Inverted&#32;nibbles</emphasis>
1528 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;invertedError;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True&#32;if&#32;one&#32;of&#32;the&#32;inverted&#32;nibbles&#32;did&#32;not&#32;match</emphasis>
1529 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;g[4];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Access&#32;bits&#32;for&#32;each&#32;of&#32;the&#32;four&#32;groups.</emphasis>
1530 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;group;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0-3&#32;-&#32;active&#32;group&#32;for&#32;access&#32;bits</emphasis>
1531 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;firstInGroup;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True&#32;for&#32;the&#32;first&#32;block&#32;dumped&#32;in&#32;the&#32;group</emphasis>
1532 &#32;&#32;&#32;&#32;
1533 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Determine&#32;position&#32;and&#32;size&#32;of&#32;sector.</emphasis>
1534 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sector&#32;&lt;&#32;32)&#32;{&#32;<emphasis role="comment">//&#32;Sectors&#32;0..31&#32;has&#32;4&#32;blocks&#32;each</emphasis>
1535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;no_of_blocks&#32;=&#32;4;
1536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;firstBlock&#32;=&#32;sector&#32;*&#32;no_of_blocks;
1537 &#32;&#32;&#32;&#32;}
1538 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sector&#32;&lt;&#32;40)&#32;{&#32;<emphasis role="comment">//&#32;Sectors&#32;32-39&#32;has&#32;16&#32;blocks&#32;each</emphasis>
1539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;no_of_blocks&#32;=&#32;16;
1540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;firstBlock&#32;=&#32;128&#32;+&#32;(sector&#32;-&#32;32)&#32;*&#32;no_of_blocks;
1541 &#32;&#32;&#32;&#32;}
1542 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;<emphasis role="comment">//&#32;Illegal&#32;input,&#32;no&#32;MIFARE&#32;Classic&#32;PICC&#32;has&#32;more&#32;than&#32;40&#32;sectors.</emphasis>
1543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1544 &#32;&#32;&#32;&#32;}
1545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1546 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Dump&#32;blocks,&#32;highest&#32;address&#32;first.</emphasis>
1547 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;byteCount;
1548 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;buffer[18];
1549 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;blockAddr;
1550 &#32;&#32;&#32;&#32;isSectorTrailer&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1551 &#32;&#32;&#32;&#32;invertedError&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;Avoid&#32;&quot;unused&#32;variable&quot;&#32;warning.</emphasis>
1552 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(int8_t&#32;blockOffset&#32;=&#32;no_of_blocks&#32;-&#32;1;&#32;blockOffset&#32;&gt;=&#32;0;&#32;blockOffset--)&#32;{
1553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;blockAddr&#32;=&#32;firstBlock&#32;+&#32;blockOffset;
1554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sector&#32;number&#32;-&#32;only&#32;on&#32;first&#32;line</emphasis>
1555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isSectorTrailer)&#32;{
1556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(sector&#32;&lt;&#32;10)
1557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&quot;</emphasis>));&#32;<emphasis role="comment">//&#32;Pad&#32;with&#32;spaces</emphasis>
1558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;&#32;&quot;</emphasis>));&#32;<emphasis role="comment">//&#32;Pad&#32;with&#32;spaces</emphasis>
1560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(sector);
1561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&quot;</emphasis>));
1562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>));
1565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Block&#32;number</emphasis>
1567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(blockAddr&#32;&lt;&#32;10)
1568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&quot;</emphasis>));&#32;<emphasis role="comment">//&#32;Pad&#32;with&#32;spaces</emphasis>
1569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(blockAddr&#32;&lt;&#32;100)
1571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;&#32;&quot;</emphasis>));&#32;<emphasis role="comment">//&#32;Pad&#32;with&#32;spaces</emphasis>
1572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>));&#32;<emphasis role="comment">//&#32;Pad&#32;with&#32;spaces</emphasis>
1574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(blockAddr);
1576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;&#32;&quot;</emphasis>));
1577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Establish&#32;encrypted&#32;communications&#32;before&#32;reading&#32;the&#32;first&#32;block</emphasis>
1578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isSectorTrailer)&#32;{
1579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="_classMFRC522_1a6c2313c4aa98806cc2bf0e9cca993ec0">PCD_Authenticate</link>(PICC_CMD_MF_AUTH_KEY_A,&#32;firstBlock,&#32;key,&#32;uid);
1580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;!=&#32;STATUS_OK)&#32;{
1581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;PCD_Authenticate()&#32;failed:&#32;&quot;</emphasis>));
1582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(<link linkend="_classMFRC522_1a32f88620ab97f7fef3693280c58cb4bb">GetStatusCodeName</link>(status));
1583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;block</emphasis>
1587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;byteCount&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(buffer);
1588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="_classMFRC522_1a6ed93e88913ea104420f3bb4a88cce52">MIFARE_Read</link>(blockAddr,&#32;buffer,&#32;&amp;byteCount);
1589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;!=&#32;STATUS_OK)&#32;{
1590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;MIFARE_Read()&#32;failed:&#32;&quot;</emphasis>));
1591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(<link linkend="_classMFRC522_1a32f88620ab97f7fef3693280c58cb4bb">GetStatusCodeName</link>(status));
1592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
1593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Dump&#32;data</emphasis>
1595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">byte</emphasis>&#32;index&#32;=&#32;0;&#32;index&#32;&lt;&#32;16;&#32;index++)&#32;{
1596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(buffer[index]&#32;&lt;&#32;0x10)
1597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;0&quot;</emphasis>));
1598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>));
1600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(buffer[index],&#32;HEX);
1601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((index&#32;%&#32;4)&#32;==&#32;3)&#32;{
1602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>));
1603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Parse&#32;sector&#32;trailer&#32;data</emphasis>
1606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isSectorTrailer)&#32;{
1607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c1&#32;&#32;=&#32;buffer[7]&#32;&gt;&gt;&#32;4;
1608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c2&#32;&#32;=&#32;buffer[8]&#32;&amp;&#32;0xF;
1609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c3&#32;&#32;=&#32;buffer[8]&#32;&gt;&gt;&#32;4;
1610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c1_&#32;=&#32;buffer[6]&#32;&amp;&#32;0xF;
1611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c2_&#32;=&#32;buffer[6]&#32;&gt;&gt;&#32;4;
1612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c3_&#32;=&#32;buffer[7]&#32;&amp;&#32;0xF;
1613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invertedError&#32;=&#32;(c1&#32;!=&#32;(~c1_&#32;&amp;&#32;0xF))&#32;||&#32;(c2&#32;!=&#32;(~c2_&#32;&amp;&#32;0xF))&#32;||&#32;(c3&#32;!=&#32;(~c3_&#32;&amp;&#32;0xF));
1614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g[0]&#32;=&#32;((c1&#32;&amp;&#32;1)&#32;&lt;&lt;&#32;2)&#32;|&#32;((c2&#32;&amp;&#32;1)&#32;&lt;&lt;&#32;1)&#32;|&#32;((c3&#32;&amp;&#32;1)&#32;&lt;&lt;&#32;0);
1615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g[1]&#32;=&#32;((c1&#32;&amp;&#32;2)&#32;&lt;&lt;&#32;1)&#32;|&#32;((c2&#32;&amp;&#32;2)&#32;&lt;&lt;&#32;0)&#32;|&#32;((c3&#32;&amp;&#32;2)&#32;&gt;&gt;&#32;1);
1616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g[2]&#32;=&#32;((c1&#32;&amp;&#32;4)&#32;&lt;&lt;&#32;0)&#32;|&#32;((c2&#32;&amp;&#32;4)&#32;&gt;&gt;&#32;1)&#32;|&#32;((c3&#32;&amp;&#32;4)&#32;&gt;&gt;&#32;2);
1617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g[3]&#32;=&#32;((c1&#32;&amp;&#32;8)&#32;&gt;&gt;&#32;1)&#32;|&#32;((c2&#32;&amp;&#32;8)&#32;&gt;&gt;&#32;2)&#32;|&#32;((c3&#32;&amp;&#32;8)&#32;&gt;&gt;&#32;3);
1618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isSectorTrailer&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Which&#32;access&#32;group&#32;is&#32;this&#32;block&#32;in?</emphasis>
1622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(no_of_blocks&#32;==&#32;4)&#32;{
1623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;group&#32;=&#32;blockOffset;
1624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;firstInGroup&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;group&#32;=&#32;blockOffset&#32;/&#32;5;
1628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;firstInGroup&#32;=&#32;(group&#32;==&#32;3)&#32;||&#32;(group&#32;!=&#32;(blockOffset&#32;+&#32;1)&#32;/&#32;5);
1629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(firstInGroup)&#32;{
1632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Print&#32;access&#32;bits</emphasis>
1633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;[&#32;&quot;</emphasis>));
1634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print((g[group]&#32;&gt;&gt;&#32;2)&#32;&amp;&#32;1,&#32;DEC);&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>));
1635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print((g[group]&#32;&gt;&gt;&#32;1)&#32;&amp;&#32;1,&#32;DEC);&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>));
1636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print((g[group]&#32;&gt;&gt;&#32;0)&#32;&amp;&#32;1,&#32;DEC);
1637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;]&#32;&quot;</emphasis>));
1638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(invertedError)&#32;{
1639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;Inverted&#32;access&#32;bits&#32;did&#32;not&#32;match!&#32;&quot;</emphasis>));
1640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(group&#32;!=&#32;3&#32;&amp;&amp;&#32;(g[group]&#32;==&#32;1&#32;||&#32;g[group]&#32;==&#32;6))&#32;{&#32;<emphasis role="comment">//&#32;Not&#32;a&#32;sector&#32;trailer,&#32;a&#32;value&#32;block</emphasis>
1644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int32_t&#32;value&#32;=&#32;(int32_t(buffer[3])&lt;&lt;24)&#32;|&#32;(int32_t(buffer[2])&lt;&lt;16)&#32;|&#32;(int32_t(buffer[1])&lt;&lt;8)&#32;|&#32;int32_t(buffer[0]);
1645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;Value=0x&quot;</emphasis>));&#32;Serial.print(value,&#32;HEX);
1646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;Adr=0x&quot;</emphasis>));&#32;Serial.print(buffer[12],&#32;HEX);
1647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println();
1649 &#32;&#32;&#32;&#32;}
1650 &#32;&#32;&#32;&#32;
1651 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1652 }&#32;<emphasis role="comment">//&#32;End&#32;PICC_DumpMifareClassicSectorToSerial()</emphasis>
1653 
1657 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1ac148d28877dd577606a28e9e7e4b6809">MFRC522::PICC_DumpMifareUltralightToSerial</link>()&#32;{
1658 &#32;&#32;&#32;&#32;MFRC522::StatusCode&#32;status;
1659 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;byteCount;
1660 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;buffer[18];
1661 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;i;
1662 &#32;&#32;&#32;&#32;
1663 &#32;&#32;&#32;&#32;Serial.println(F(<emphasis role="stringliteral">&quot;Page&#32;&#32;0&#32;&#32;1&#32;&#32;2&#32;&#32;3&quot;</emphasis>));
1664 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Try&#32;the&#32;mpages&#32;of&#32;the&#32;original&#32;Ultralight.&#32;Ultralight&#32;C&#32;has&#32;more&#32;pages.</emphasis>
1665 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">byte</emphasis>&#32;page&#32;=&#32;0;&#32;page&#32;&lt;&#32;16;&#32;page&#32;+=4)&#32;{&#32;<emphasis role="comment">//&#32;Read&#32;returns&#32;data&#32;for&#32;4&#32;pages&#32;at&#32;a&#32;time.</emphasis>
1666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;pages</emphasis>
1667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;byteCount&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(buffer);
1668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="_classMFRC522_1a6ed93e88913ea104420f3bb4a88cce52">MIFARE_Read</link>(page,&#32;buffer,&#32;&amp;byteCount);
1669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;!=&#32;STATUS_OK)&#32;{
1670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;MIFARE_Read()&#32;failed:&#32;&quot;</emphasis>));
1671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(<link linkend="_classMFRC522_1a32f88620ab97f7fef3693280c58cb4bb">GetStatusCodeName</link>(status));
1672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Dump&#32;data</emphasis>
1675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">byte</emphasis>&#32;offset&#32;=&#32;0;&#32;offset&#32;&lt;&#32;4;&#32;offset++)&#32;{
1676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;page&#32;+&#32;offset;
1677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i&#32;&lt;&#32;10)
1678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;&#32;&quot;</emphasis>));&#32;<emphasis role="comment">//&#32;Pad&#32;with&#32;spaces</emphasis>
1679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>));&#32;<emphasis role="comment">//&#32;Pad&#32;with&#32;spaces</emphasis>
1681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(i);
1682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;&#32;&quot;</emphasis>));
1683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">byte</emphasis>&#32;index&#32;=&#32;0;&#32;index&#32;&lt;&#32;4;&#32;index++)&#32;{
1684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;4&#32;*&#32;offset&#32;+&#32;index;
1685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(buffer[i]&#32;&lt;&#32;0x10)
1686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;0&quot;</emphasis>));
1687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>));
1689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(buffer[i],&#32;HEX);
1690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println();
1692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1693 &#32;&#32;&#32;&#32;}
1694 }&#32;<emphasis role="comment">//&#32;End&#32;PICC_DumpMifareUltralightToSerial()</emphasis>
1695 
1699 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMFRC522_1ab8c712963189654e9bc368be8783e2ab">MFRC522::MIFARE_SetAccessBits</link>(&#32;<emphasis role="keywordtype">byte</emphasis>&#32;*accessBitBuffer,&#32;&#32;
1700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;g0,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;g1,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;g2,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;g3&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
1705 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;c1&#32;=&#32;((g3&#32;&amp;&#32;4)&#32;&lt;&lt;&#32;1)&#32;|&#32;((g2&#32;&amp;&#32;4)&#32;&lt;&lt;&#32;0)&#32;|&#32;((g1&#32;&amp;&#32;4)&#32;&gt;&gt;&#32;1)&#32;|&#32;((g0&#32;&amp;&#32;4)&#32;&gt;&gt;&#32;2);
1706 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;c2&#32;=&#32;((g3&#32;&amp;&#32;2)&#32;&lt;&lt;&#32;2)&#32;|&#32;((g2&#32;&amp;&#32;2)&#32;&lt;&lt;&#32;1)&#32;|&#32;((g1&#32;&amp;&#32;2)&#32;&lt;&lt;&#32;0)&#32;|&#32;((g0&#32;&amp;&#32;2)&#32;&gt;&gt;&#32;1);
1707 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;c3&#32;=&#32;((g3&#32;&amp;&#32;1)&#32;&lt;&lt;&#32;3)&#32;|&#32;((g2&#32;&amp;&#32;1)&#32;&lt;&lt;&#32;2)&#32;|&#32;((g1&#32;&amp;&#32;1)&#32;&lt;&lt;&#32;1)&#32;|&#32;((g0&#32;&amp;&#32;1)&#32;&lt;&lt;&#32;0);
1708 &#32;&#32;&#32;&#32;
1709 &#32;&#32;&#32;&#32;accessBitBuffer[0]&#32;=&#32;(~c2&#32;&amp;&#32;0xF)&#32;&lt;&lt;&#32;4&#32;|&#32;(~c1&#32;&amp;&#32;0xF);
1710 &#32;&#32;&#32;&#32;accessBitBuffer[1]&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c1&#32;&lt;&lt;&#32;4&#32;|&#32;(~c3&#32;&amp;&#32;0xF);
1711 &#32;&#32;&#32;&#32;accessBitBuffer[2]&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c3&#32;&lt;&lt;&#32;4&#32;|&#32;c2;
1712 }&#32;<emphasis role="comment">//&#32;End&#32;MIFARE_SetAccessBits()</emphasis>
1713 
1714 
1726 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classMFRC522_1a925607adc9382720c222578bd236a9c8">MFRC522::MIFARE_OpenUidBackdoor</link>(<emphasis role="keywordtype">bool</emphasis>&#32;logErrors)&#32;{
1727 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Magic&#32;sequence:</emphasis>
1728 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&gt;&#32;50&#32;00&#32;57&#32;CD&#32;(HALT&#32;+&#32;CRC)</emphasis>
1729 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&gt;&#32;40&#32;(7&#32;bits&#32;only)</emphasis>
1730 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&lt;&#32;A&#32;(4&#32;bits&#32;only)</emphasis>
1731 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&gt;&#32;43</emphasis>
1732 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&lt;&#32;A&#32;(4&#32;bits&#32;only)</emphasis>
1733 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Then&#32;you&#32;can&#32;write&#32;to&#32;sector&#32;0&#32;without&#32;authenticating</emphasis>
1734 &#32;&#32;&#32;&#32;
1735 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1a8874921b4ed26c5b73d89c90f76d4933">PICC_HaltA</link>();&#32;<emphasis role="comment">//&#32;50&#32;00&#32;57&#32;CD</emphasis>
1736 &#32;&#32;&#32;&#32;
1737 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;cmd&#32;=&#32;0x40;
1738 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;validBits&#32;=&#32;7;&#32;<emphasis role="comment">/*&#32;Our&#32;command&#32;is&#32;only&#32;7&#32;bits.&#32;After&#32;receiving&#32;card&#32;response,</emphasis>
1739 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this&#32;will&#32;contain&#32;amount&#32;of&#32;valid&#32;response&#32;bits.&#32;*/</emphasis>
1740 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;response[32];&#32;<emphasis role="comment">//&#32;Card&apos;s&#32;response&#32;is&#32;written&#32;here</emphasis>
1741 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;received&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(response);
1742 &#32;&#32;&#32;&#32;MFRC522::StatusCode&#32;status&#32;=&#32;<link linkend="_classMFRC522_1aaa96aa7ec4f95e0835cb758ad0450d74">PCD_TransceiveData</link>(&amp;cmd,&#32;(<emphasis role="keywordtype">byte</emphasis>)1,&#32;response,&#32;&amp;received,&#32;&amp;validBits,&#32;(<emphasis role="keywordtype">byte</emphasis>)0,&#32;<emphasis role="keyword">false</emphasis>);&#32;<emphasis role="comment">//&#32;40</emphasis>
1743 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(status&#32;!=&#32;STATUS_OK)&#32;{
1744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(logErrors)&#32;{
1745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(F(<emphasis role="stringliteral">&quot;Card&#32;did&#32;not&#32;respond&#32;to&#32;0x40&#32;after&#32;HALT&#32;command.&#32;Are&#32;you&#32;sure&#32;it&#32;is&#32;a&#32;UID&#32;changeable&#32;one?&quot;</emphasis>));
1746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;Error&#32;name:&#32;&quot;</emphasis>));
1747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(<link linkend="_classMFRC522_1a32f88620ab97f7fef3693280c58cb4bb">GetStatusCodeName</link>(status));
1748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1750 &#32;&#32;&#32;&#32;}
1751 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(received&#32;!=&#32;1&#32;||&#32;response[0]&#32;!=&#32;0x0A)&#32;{
1752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(logErrors)&#32;{
1753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;Got&#32;bad&#32;response&#32;on&#32;backdoor&#32;0x40&#32;command:&#32;&quot;</emphasis>));
1754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(response[0],&#32;HEX);
1755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;(&quot;</emphasis>));
1756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(validBits);
1757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;valid&#32;bits)\r\n&quot;</emphasis>));
1758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1760 &#32;&#32;&#32;&#32;}
1761 &#32;&#32;&#32;&#32;
1762 &#32;&#32;&#32;&#32;cmd&#32;=&#32;0x43;
1763 &#32;&#32;&#32;&#32;validBits&#32;=&#32;8;
1764 &#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="_classMFRC522_1aaa96aa7ec4f95e0835cb758ad0450d74">PCD_TransceiveData</link>(&amp;cmd,&#32;(<emphasis role="keywordtype">byte</emphasis>)1,&#32;response,&#32;&amp;received,&#32;&amp;validBits,&#32;(<emphasis role="keywordtype">byte</emphasis>)0,&#32;<emphasis role="keyword">false</emphasis>);&#32;<emphasis role="comment">//&#32;43</emphasis>
1765 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(status&#32;!=&#32;STATUS_OK)&#32;{
1766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(logErrors)&#32;{
1767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(F(<emphasis role="stringliteral">&quot;Error&#32;in&#32;communication&#32;at&#32;command&#32;0x43,&#32;after&#32;successfully&#32;executing&#32;0x40&quot;</emphasis>));
1768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;Error&#32;name:&#32;&quot;</emphasis>));
1769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(<link linkend="_classMFRC522_1a32f88620ab97f7fef3693280c58cb4bb">GetStatusCodeName</link>(status));
1770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1772 &#32;&#32;&#32;&#32;}
1773 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(received&#32;!=&#32;1&#32;||&#32;response[0]&#32;!=&#32;0x0A)&#32;{
1774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(logErrors)&#32;{
1775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;Got&#32;bad&#32;response&#32;on&#32;backdoor&#32;0x43&#32;command:&#32;&quot;</emphasis>));
1776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(response[0],&#32;HEX);
1777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;(&quot;</emphasis>));
1778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(validBits);
1779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;&#32;valid&#32;bits)\r\n&quot;</emphasis>));
1780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1782 &#32;&#32;&#32;&#32;}
1783 &#32;&#32;&#32;&#32;
1784 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;You&#32;can&#32;now&#32;write&#32;to&#32;sector&#32;0&#32;without&#32;authenticating!</emphasis>
1785 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1786 }&#32;<emphasis role="comment">//&#32;End&#32;MIFARE_OpenUidBackdoor()</emphasis>
1787 
1796 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classMFRC522_1a2bdc18af4952ce99099607c84139b51c">MFRC522::MIFARE_SetUid</link>(<emphasis role="keywordtype">byte</emphasis>&#32;*newUid,&#32;<emphasis role="keywordtype">byte</emphasis>&#32;uidSize,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;logErrors)&#32;{
1797 &#32;&#32;&#32;&#32;
1798 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;UID&#32;+&#32;BCC&#32;byte&#32;can&#32;not&#32;be&#32;larger&#32;than&#32;16&#32;together</emphasis>
1799 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!newUid&#32;||&#32;!uidSize&#32;||&#32;uidSize&#32;&gt;&#32;15)&#32;{
1800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(logErrors)&#32;{
1801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(F(<emphasis role="stringliteral">&quot;New&#32;UID&#32;buffer&#32;empty,&#32;size&#32;0,&#32;or&#32;size&#32;&gt;&#32;15&#32;given&quot;</emphasis>));
1802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1804 &#32;&#32;&#32;&#32;}
1805 &#32;&#32;&#32;&#32;
1806 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Authenticate&#32;for&#32;reading</emphasis>
1807 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1structMFRC522_1_1MIFARE__Key">MIFARE_Key</link>&#32;key&#32;=&#32;{0xFF,&#32;0xFF,&#32;0xFF,&#32;0xFF,&#32;0xFF,&#32;0xFF};
1808 &#32;&#32;&#32;&#32;MFRC522::StatusCode&#32;status&#32;=&#32;<link linkend="_classMFRC522_1a6c2313c4aa98806cc2bf0e9cca993ec0">PCD_Authenticate</link>(MFRC522::PICC_CMD_MF_AUTH_KEY_A,&#32;(<emphasis role="keywordtype">byte</emphasis>)1,&#32;&amp;key,&#32;&amp;uid);
1809 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;!=&#32;STATUS_OK)&#32;{
1810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;==&#32;STATUS_TIMEOUT)&#32;{
1812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;get&#32;a&#32;read&#32;timeout&#32;if&#32;no&#32;card&#32;is&#32;selected&#32;yet,&#32;so&#32;let&apos;s&#32;select&#32;one</emphasis>
1813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Wake&#32;the&#32;card&#32;up&#32;again&#32;if&#32;sleeping</emphasis>
1815 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;byte&#32;atqa_answer[2];</emphasis>
1816 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;byte&#32;atqa_size&#32;=&#32;2;</emphasis>
1817 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PICC_WakeupA(atqa_answer,&#32;&amp;atqa_size);</emphasis>
1818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classMFRC522_1a3adca9d3b455c680ebcde3b74c4e567b">PICC_IsNewCardPresent</link>()&#32;||&#32;!<link linkend="_classMFRC522_1aab1218c71cec9cc17ee3ac8a683df106">PICC_ReadCardSerial</link>())&#32;{
1820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(F(<emphasis role="stringliteral">&quot;No&#32;card&#32;was&#32;previously&#32;selected,&#32;and&#32;none&#32;are&#32;available.&#32;Failed&#32;to&#32;set&#32;UID.&quot;</emphasis>));
1821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="_classMFRC522_1a6c2313c4aa98806cc2bf0e9cca993ec0">PCD_Authenticate</link>(MFRC522::PICC_CMD_MF_AUTH_KEY_A,&#32;(<emphasis role="keywordtype">byte</emphasis>)1,&#32;&amp;key,&#32;&amp;uid);
1825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;!=&#32;STATUS_OK)&#32;{
1826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;tried,&#32;time&#32;to&#32;give&#32;up</emphasis>
1827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(logErrors)&#32;{
1828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(F(<emphasis role="stringliteral">&quot;Failed&#32;to&#32;authenticate&#32;to&#32;card&#32;for&#32;reading,&#32;could&#32;not&#32;set&#32;UID:&#32;&quot;</emphasis>));
1829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(<link linkend="_classMFRC522_1a32f88620ab97f7fef3693280c58cb4bb">GetStatusCodeName</link>(status));
1830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(logErrors)&#32;{
1836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;PCD_Authenticate()&#32;failed:&#32;&quot;</emphasis>));
1837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(<link linkend="_classMFRC522_1a32f88620ab97f7fef3693280c58cb4bb">GetStatusCodeName</link>(status));
1838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1841 &#32;&#32;&#32;&#32;}
1842 &#32;&#32;&#32;&#32;
1843 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;block&#32;0</emphasis>
1844 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;block0_buffer[18];
1845 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;byteCount&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(block0_buffer);
1846 &#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="_classMFRC522_1a6ed93e88913ea104420f3bb4a88cce52">MIFARE_Read</link>((<emphasis role="keywordtype">byte</emphasis>)0,&#32;block0_buffer,&#32;&amp;byteCount);
1847 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;!=&#32;STATUS_OK)&#32;{
1848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(logErrors)&#32;{
1849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;MIFARE_Read()&#32;failed:&#32;&quot;</emphasis>));
1850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(<link linkend="_classMFRC522_1a32f88620ab97f7fef3693280c58cb4bb">GetStatusCodeName</link>(status));
1851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(F(<emphasis role="stringliteral">&quot;Are&#32;you&#32;sure&#32;your&#32;KEY&#32;A&#32;for&#32;sector&#32;0&#32;is&#32;0xFFFFFFFFFFFF?&quot;</emphasis>));
1852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1854 &#32;&#32;&#32;&#32;}
1855 &#32;&#32;&#32;&#32;
1856 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Write&#32;new&#32;UID&#32;to&#32;the&#32;data&#32;we&#32;just&#32;read,&#32;and&#32;calculate&#32;BCC&#32;byte</emphasis>
1857 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;bcc&#32;=&#32;0;
1858 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint8_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;uidSize;&#32;i++)&#32;{
1859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;block0_buffer[i]&#32;=&#32;newUid[i];
1860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bcc&#32;^=&#32;newUid[i];
1861 &#32;&#32;&#32;&#32;}
1862 &#32;&#32;&#32;&#32;
1863 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Write&#32;BCC&#32;byte&#32;to&#32;buffer</emphasis>
1864 &#32;&#32;&#32;&#32;block0_buffer[uidSize]&#32;=&#32;bcc;
1865 &#32;&#32;&#32;&#32;
1866 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Stop&#32;encrypted&#32;traffic&#32;so&#32;we&#32;can&#32;send&#32;raw&#32;bytes</emphasis>
1867 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1a24d3ab7b2170fdfa3f0121a7256f12d9">PCD_StopCrypto1</link>();
1868 &#32;&#32;&#32;&#32;
1869 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Activate&#32;UID&#32;backdoor</emphasis>
1870 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classMFRC522_1a925607adc9382720c222578bd236a9c8">MIFARE_OpenUidBackdoor</link>(logErrors))&#32;{
1871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(logErrors)&#32;{
1872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(F(<emphasis role="stringliteral">&quot;Activating&#32;the&#32;UID&#32;backdoor&#32;failed.&quot;</emphasis>));
1873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1875 &#32;&#32;&#32;&#32;}
1876 &#32;&#32;&#32;&#32;
1877 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Write&#32;modified&#32;block&#32;0&#32;back&#32;to&#32;card</emphasis>
1878 &#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="_classMFRC522_1a0dc5fb05769779ec3ed708bd153706b3">MIFARE_Write</link>((<emphasis role="keywordtype">byte</emphasis>)0,&#32;block0_buffer,&#32;(<emphasis role="keywordtype">byte</emphasis>)16);
1879 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;!=&#32;STATUS_OK)&#32;{
1880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(logErrors)&#32;{
1881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;MIFARE_Write()&#32;failed:&#32;&quot;</emphasis>));
1882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(<link linkend="_classMFRC522_1a32f88620ab97f7fef3693280c58cb4bb">GetStatusCodeName</link>(status));
1883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1885 &#32;&#32;&#32;&#32;}
1886 &#32;&#32;&#32;&#32;
1887 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Wake&#32;the&#32;card&#32;up&#32;again</emphasis>
1888 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;atqa_answer[2];
1889 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;atqa_size&#32;=&#32;2;
1890 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1ad00a1efcfa6dc203ca885d43f4d02125">PICC_WakeupA</link>(atqa_answer,&#32;&amp;atqa_size);
1891 &#32;&#32;&#32;&#32;
1892 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1893 }
1894 
1898 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classMFRC522_1afcbb15d925cb3bea9f58595111fbca48">MFRC522::MIFARE_UnbrickUidSector</link>(<emphasis role="keywordtype">bool</emphasis>&#32;logErrors)&#32;{
1899 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1a925607adc9382720c222578bd236a9c8">MIFARE_OpenUidBackdoor</link>(logErrors);
1900 &#32;&#32;&#32;&#32;
1901 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;block0_buffer[]&#32;=&#32;{0x01,&#32;0x02,&#32;0x03,&#32;0x04,&#32;0x04,&#32;0x08,&#32;0x04,&#32;0x00,&#32;0x00,&#32;0x00,&#32;0x00,&#32;0x00,&#32;0x00,&#32;0x00,&#32;0x00,&#32;0x00};&#32;&#32;&#32;&#32;
1902 &#32;&#32;&#32;&#32;
1903 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Write&#32;modified&#32;block&#32;0&#32;back&#32;to&#32;card</emphasis>
1904 &#32;&#32;&#32;&#32;MFRC522::StatusCode&#32;status&#32;=&#32;<link linkend="_classMFRC522_1a0dc5fb05769779ec3ed708bd153706b3">MIFARE_Write</link>((<emphasis role="keywordtype">byte</emphasis>)0,&#32;block0_buffer,&#32;(<emphasis role="keywordtype">byte</emphasis>)16);
1905 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;!=&#32;STATUS_OK)&#32;{
1906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(logErrors)&#32;{
1907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;MIFARE_Write()&#32;failed:&#32;&quot;</emphasis>));
1908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.println(<link linkend="_classMFRC522_1a32f88620ab97f7fef3693280c58cb4bb">GetStatusCodeName</link>(status));
1909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1911 &#32;&#32;&#32;&#32;}
1912 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1913 }
1914 
1916 <emphasis role="comment">//&#32;Convenience&#32;functions&#32;-&#32;does&#32;not&#32;add&#32;extra&#32;functionality</emphasis>
1918 
1925 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classMFRC522_1a3adca9d3b455c680ebcde3b74c4e567b">MFRC522::PICC_IsNewCardPresent</link>()&#32;{
1926 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;bufferATQA[2];
1927 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;bufferSize&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(bufferATQA);
1928 
1929 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reset&#32;baud&#32;rates</emphasis>
1930 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(TxModeReg,&#32;0x00);
1931 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(RxModeReg,&#32;0x00);
1932 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reset&#32;ModWidthReg</emphasis>
1933 &#32;&#32;&#32;&#32;<link linkend="_classMFRC522_1aa5e5825adb4c784d8a5a60242c135fb7">PCD_WriteRegister</link>(ModWidthReg,&#32;0x26);
1934 
1935 &#32;&#32;&#32;&#32;MFRC522::StatusCode&#32;result&#32;=&#32;<link linkend="_classMFRC522_1a4e0ac6edf5e8f6ade351b009278fbbc7">PICC_RequestA</link>(bufferATQA,&#32;&amp;bufferSize);
1936 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(result&#32;==&#32;STATUS_OK&#32;||&#32;result&#32;==&#32;STATUS_COLLISION);
1937 }&#32;<emphasis role="comment">//&#32;End&#32;PICC_IsNewCardPresent()</emphasis>
1938 
1947 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classMFRC522_1aab1218c71cec9cc17ee3ac8a683df106">MFRC522::PICC_ReadCardSerial</link>()&#32;{
1948 &#32;&#32;&#32;&#32;MFRC522::StatusCode&#32;result&#32;=&#32;<link linkend="_classMFRC522_1a7a78c629cb4e1d90cc2d7526b17d6c22">PICC_Select</link>(&amp;uid);
1949 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(result&#32;==&#32;STATUS_OK);
1950 }&#32;<emphasis role="comment">//&#32;End&#32;</emphasis>
</programlisting></section>
